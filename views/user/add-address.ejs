<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Eon Forge - Manage Addresses</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" rel="stylesheet">
    <link
        href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&family=Playfair+Display:wght@400;500;600;700&display=swap"
        rel="stylesheet">

    <script>
        tailwind.config = {
            theme: {
                extend: {
                    fontFamily: {
                        'inter': ['Inter', 'sans-serif'],
                        'playfair': ['Playfair Display', 'serif'],
                    },
                    colors: {
                        'primary': '#1a1a1a',
                        'accent': '#d4af37',
                        'accent-light': '#f4e4a6',
                        'cream': '#fefdfb',
                        'warm-gray': '#f8f7f4',
                        'text-primary': '#2d2d2d',
                        'text-secondary': '#6b7280',
                    },
                    animation: {
                        'fade-in': 'fadeIn 0.5s ease-in-out',
                        'slide-up': 'slideUp 0.3s ease-out',
                        'scale-in': 'scaleIn 0.2s ease-out',
                    }
                }
            }
        }
    </script>

    <style>
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        @keyframes slideUp {
            from { transform: translateY(10px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }

        @keyframes scaleIn {
            from { transform: scale(0.95); opacity: 0; }
            to { transform: scale(1); opacity: 1; }
        }

        .toast {
            position: fixed;
            bottom: 1rem;
            right: 1rem;
            background-color: #333333;
            color: white;
            padding: 0.75rem 1.25rem;
            border-radius: 0.375rem;
            border-left: 4px solid #666666;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            opacity: 0;
            transition: all 0.3s ease;
            z-index: 1000;
            font-size: 0.875rem;
            font-weight: 500;
            max-width: 300px;
            transform: translateY(10px);
        }

        .toast.show {
            opacity: 1;
            transform: translateY(0);
        }

        .toast.success { background-color: #333333; border-left-color: #10b981; }
        .toast.error { background-color: #333333; border-left-color: #ef4444; }
        .toast.warning { background-color: #333333; border-left-color: #f59e0b; }
        .toast.info { background-color: #333333; border-left-color: #3b82f6; }

        .glassmorphism {
            background: rgba(255, 255, 255, 0.25);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.18);
        }

        .gradient-bg {
            background: linear-gradient(135deg, #fefdfb 0%, #f8f7f4 100%);
        }

        .address-card {
            transition: all 0.3s ease;
        }

        .address-card:hover {
            transform: translateY(-4px);
            box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
        }

        .modal-backdrop {
            backdrop-filter: blur(4px);
        }

        .input-focus:focus {
            transform: translateY(-1px);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
        }

        .btn-primary {
            background: linear-gradient(135deg, #d4af37 0%, #f4e4a6 100%);
            color: #1a1a1a;
            font-weight: 600;
            padding: 0.75rem 1.5rem;
            border-radius: 0.75rem;
            border: none;
            cursor: pointer;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px -5px rgba(212, 175, 55, 0.4);
        }

        .btn-secondary {
            background: #f8fafc;
            color: #64748b;
            border: 2px solid #e2e8f0;
            font-weight: 500;
            padding: 0.75rem 1.5rem;
            border-radius: 0.75rem;
            cursor: pointer;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }

        .btn-secondary:hover {
            background: #f1f5f9;
            border-color: #d4af37;
            color: #d4af37;
            transform: translateY(-1px);
        }

        .btn-map {
            background: #f4e4a6;
            color: #1a1a1a;
            font-weight: 500;
            padding: 0.5rem 1rem;
            border-radius: 0.5rem;
            cursor: pointer;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }

        .btn-map:hover {
            background: #e0d094;
            transform: translateY(-1px);
        }

        .swal2-popup {
            border-radius: 1rem !important;
            padding: 2rem !important;
        }

        .swal2-title {
            font-family: 'Playfair Display', serif !important;
            color: #1a1a1a !important;
        }

        .swal2-html-container {
            margin: 1rem 0 !important;
        }

        .loading-spinner {
            border: 2px solid #f3f3f3;
            border-top: 2px solid #d4af37;
            border-radius: 50%;
            width: 16px;
            height: 16px;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>

<body class="gradient-bg min-h-screen">
    <div id="toastContainer"></div>

    <div class="gradient-bg py-12">
        <div class="container mx-auto px-4">
            <div class="text-center text-primary animate-fade-in">
                <h1 class="text-3xl font-playfair font-bold mb-2">Manage Addresses</h1>
                <p class="text-lg text-text-secondary">Add, edit, and organize your delivery addresses</p>
            </div>
        </div>
    </div>

    <div class="container mx-auto px-4 -mt-6 pb-12">
        <div class="max-w-6xl mx-auto">
            <div class="bg-white rounded-2xl shadow-xl p-8 mb-8 animate-slide-up">
                <div class="flex flex-col sm:flex-row justify-between items-center gap-4">
                    <div>
                        <h2 class="text-2xl font-playfair font-bold text-primary mb-2">Your Addresses</h2>
                        <p class="text-text-secondary">Manage your delivery locations for faster checkout</p>
                    </div>
                    <button onclick="openAddAddressModal()" class="btn-primary shadow-lg">
                        <i class="fas fa-plus mr-2"></i>Add New Address
                    </button>
                </div>
            </div>

            <div class="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6" id="addressGrid">
                <% if (address && address.address.length > 0) { %>
                    <% address.address.forEach((addr, index) => { %>
                        <div class="address-card bg-white rounded-2xl shadow-lg p-6 border border-gray-100">
                            <div class="flex justify-between items-start mb-4">
                                <div class="flex items-center space-x-3">
                                    <div
                                        class="w-12 h-12 rounded-xl flex items-center justify-center
                                        <%= addr.type === 'home' ? 'bg-green-100' : addr.type === 'work' ? 'bg-blue-100' : 'bg-purple-100' %>">
                                        <i
                                            class="text-xl
                                            <%= addr.type === 'home' ? 'fas fa-home text-green-600' : addr.type === 'work' ? 'fas fa-building text-blue-600' : 'fas fa-map-marker-alt text-purple-600' %>">
                                        </i>
                                    </div>
                                    <div>
                                        <h3 class="font-bold text-primary capitalize">
                                            <%= addr.type %>
                                        </h3>
                                        <% if (addr.isDefault) { %>
                                            <span
                                                class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                                <i class="fas fa-check-circle mr-1"></i>Default
                                            </span>
                                        <% } else { %>
                                            <span
                                                class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-text-secondary">
                                                Secondary
                                            </span>
                                        <% } %>
                                    </div>
                                </div>
                                <div class="flex space-x-1">
                                    <button
                                        data-id="<%= address._id %>"
                                        data-street="<%= addr.street %>"
                                        data-city="<%= addr.city %>"
                                        data-state="<%= addr.state %>"
                                        data-pin="<%= addr.pin %>"
                                        data-country="<%= addr.country %>"
                                        data-type="<%= addr.type %>"
                                        data-phone="<%= addr.phone %>"
                                        onclick="handleEditClick(this)"
                                        class="p-2 text-accent hover:bg-accent/10 rounded-lg transition duration-300">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button onclick='deleteAddress("<%=address._id%>","<%=addr._id%>")'
                                        class="p-2 text-red-600 hover:bg-red-50 rounded-lg transition duration-300">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </div>
                            <div class="space-y-2">
                                <p class="text-text-primary font-medium">
                                    <%= addr.street %>
                                </p>
                                <p class="text-text-secondary">
                                    <%= addr.city %>, <%= addr.pin %>
                                </p>
                                <p class="text-text-secondary">
                                    <%= addr.state %>, <%= addr.country %>
                                </p>
                                <% if (addr.phone) { %>
                                    <p class="text-text-secondary"><i class="fas fa-phone-alt mr-2"></i>
                                        <%= addr.phone %>
                                    </p>
                                <% } %>
                            </div>
                            <div class="mt-4 pt-4 border-t border-gray-100">
                                <button class="w-full btn-map">
                                    <i class="fas fa-map-marker-alt mr-2"></i>View on Map
                                </button>
                            </div>
                        </div>
                    <% }) %>
                <% } else { %>
                    <div id="emptyState" class="hidden col-span-3 text-center py-12">
                        <div
                            class="w-24 h-24 bg-accent/10 rounded-full flex items-center justify-center mx-auto mb-4">
                            <i class="fas fa-map-marker-alt text-accent text-3xl"></i>
                        </div>
                        <h4 class="text-xl font-playfair font-semibold text-primary mb-2">No addresses yet</h4>
                        <p class="text-text-secondary mb-6">Add an address to get started</p>
                        <button onclick="openAddAddressModal()" class="btn-primary">
                            Add Address
                        </button>
                    </div>
                    <script>
                        document.getElementById('emptyState').classList.remove('hidden');
                    </script>
                <% } %>
            </div>

            <div id="addAddressModal"
                class="hidden fixed inset-0 bg-black bg-opacity-50 modal-backdrop flex items-center justify-center z-50 p-4">
                <div
                    class="bg-white rounded-2xl p-8 w-full max-w-lg shadow-2xl transform transition-all max-h-[90vh] overflow-y-auto">
                    <div class="text-center mb-6">
                        <div class="w-16 h-16 bg-accent/10 rounded-full flex items-center justify-center mx-auto mb-4">
                            <i class="fas fa-plus text-accent text-2xl"></i>
                        </div>
                        <h3 class="text-2xl font-playfair font-bold text-primary">Add New Address</h3>
                        <p class="text-text-secondary mt-2">Enter your delivery address details</p>
                    </div>

                    <form id="addAddressForm" class="space-y-6" enctype="application/x-www-form-urlencoded">
                        <div class="space-y-2">
                            <label class="block text-text-primary font-semibold text-sm uppercase tracking-wide">Address Type</label>
                            <div class="grid grid-cols-3 gap-3">
                                <label
                                    class="flex items-center justify-center p-3 border-2 border-gray-200 rounded-xl cursor-pointer hover:border-accent transition duration-300">
                                    <input type="radio" name="type" value="home" class="sr-only" checked>
                                    <div class="text-center">
                                        <i class="fas fa-home text-green-600 text-xl mb-1"></i>
                                        <p class="text-sm font-medium">Home</p>
                                    </div>
                                </label>
                                <label
                                    class="flex items-center justify-center p-3 border-2 border-gray-200 rounded-xl cursor-pointer hover:border-accent transition duration-300">
                                    <input type="radio" name="type" value="work" class="sr-only">
                                    <div class="text-center">
                                        <i class="fas fa-building text-blue-600 text-xl mb-1"></i>
                                        <p class="text-sm font-medium">Work</p>
                                    </div>
                                </label>
                                <label
                                    class="flex items-center justify-center p-3 border-2 border-gray-200 rounded-xl cursor-pointer hover:border-accent transition duration-300">
                                    <input type="radio" name="type" value="other" class="sr-only">
                                    <div class="text-center">
                                        <i class="fas fa-map-marker-alt text-purple-600 text-xl mb-1"></i>
                                        <p class="text-sm font-medium">Other</p>
                                    </div>
                                </label>
                            </div>
                        </div>
                        <div class="space-y-2 relative">
                            <label for="street" class="block text-text-primary font-semibold text-sm">
                                <i class="fas fa-road text-accent mr-2"></i>Street Address
                            </label>
                            <input 
                                type="text" 
                                id="street" 
                                name="street" 
                                data-autocomplete="true"
                                class="w-full p-4 border-2 border-gray-200 rounded-xl focus:outline-none focus:border-accent focus:ring-2 focus:ring-accent-light transition duration-300 input-focus"
                                placeholder="Enter street address">
                            <ul id="photonSuggestionContainerAdd"
                                class="absolute left-0 top-full mt-1 w-full bg-white border border-gray-300 rounded-lg shadow-lg hidden z-50 max-h-60 overflow-y-auto">
                            </ul>
                        </div>
                        <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                            <div class="space-y-2">
                                <label for="city" class="block text-text-primary font-semibold text-sm">
                                    <i class="fas fa-city text-accent mr-2"></i>City
                                </label>
                                <input type="text" id="city" name="city"
                                    class="w-full p-4 border-2 border-gray-200 rounded-xl focus:outline-none focus:border-accent focus:ring-2 focus:ring-accent-light transition duration-300 input-focus"
                                    placeholder="Select from suggestions" readonly>
                            </div>
                            <div class="space-y-2">
                                <label for="state" class="block text-text-primary font-semibold text-sm">
                                    <i class="fas fa-map text-accent mr-2"></i>State
                                </label>
                                <input type="text" id="state" name="state"
                                    class="w-full p-4 border-2 border-gray-200 rounded-xl focus:outline-none focus:border-accent focus:ring-2 focus:ring-accent-light transition duration-300 input-focus"
                                    placeholder="Select from suggestions" readonly>
                            </div>
                        </div>
                        <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                            <div class="space-y-2">
                                <label for="pin" class="block text-text-primary font-semibold text-sm">
                                    <i class="fas fa-mail-bulk text-accent mr-2"></i>Pin Code
                                </label>
                                <input type="text" id="pin" name="pin"
                                    class="w-full p-4 border-2 border-gray-200 rounded-xl focus:outline-none focus:border-accent focus:ring-2 focus:ring-accent-light transition duration-300 input-focus"
                                    placeholder="Select from suggestions" readonly>
                            </div>
                            <div class="space-y-2">
                                <label for="phone" class="block text-text-primary font-semibold text-sm">
                                    <i class="fas fa-phone-alt text-accent mr-2"></i>Phone Number
                                </label>
                                <div class="flex">
                                    <span class="inline-flex items-center px-3 rounded-l-xl border-2 border-gray-200 bg-gray-100 text-gray-700">+91</span>
                                    <input type="tel" id="phone" name="phone"
                                        class="w-full p-4 border-2 border-gray-200 border-l-0 rounded-r-xl focus:outline-none focus:border-accent focus:ring-2 focus:ring-accent-light transition duration-300 input-focus"
                                        placeholder="9876543210" pattern="[0-9]{10}"
                                       >
                                </div>
                                <p class="text-text-secondary text-xs mt-1">Enter exactly 10 digits</p>
                            </div>
                        </div>
                        <div class="space-y-2">
                            <label for="country" class="block text-text-primary font-semibold text-sm">
                                <i class="fas fa-globe text-accent mr-2"></i>Country
                            </label>
                            <input id="country" name="country"
                                class="w-full p-4 border-2 border-gray-200 rounded-xl focus:outline-none focus:border-accent focus:ring-2 focus:ring-accent-light transition duration-300 input-focus"
                                value="India" readonly>
                        </div>
                        <div class="flex items-center space-x-3 p-4 bg-warm-gray rounded-xl">
                            <input type="checkbox" id="isDefault" name="isDefault"
                                class="w-5 h-5 text-accent rounded focus:ring-accent-light">
                            <label for="isDefault" class="text-text-primary font-medium">
                                <i class="fas fa-star text-accent mr-2"></i>Set as default address
                            </label>
                        </div>
                        <div class="flex space-x-3 pt-4">
                            <button type="button" onclick="closeAddAddressModal()" class="flex-1 btn-secondary">
                                Cancel
                            </button>
                            <button type="submit" id="addAddressBtn" class="flex-1 btn-primary">
                                <i class="fas fa-save mr-2"></i>Save Address
                            </button>
                        </div>
                    </form>
                </div>
            </div>

            <div id="editAddressModal"
                class="hidden fixed inset-0 bg-black bg-opacity-50 modal-backdrop flex items-center justify-center z-50 p-4">
                <div
                    class="bg-white rounded-2xl p-8 w-full max-w-lg shadow-2xl transform transition-all max-h-[90vh] overflow-y-auto">
                    <div class="text-center mb-6">
                        <div class="w-16 h-16 bg-accent/10 rounded-full flex items-center justify-center mx-auto mb-4">
                            <i class="fas fa-edit text-accent text-2xl"></i>
                        </div>
                        <h3 class="text-2xl font-playfair font-bold text-primary">Edit Address</h3>
                        <p class="text-text-secondary mt-2">Update your address information</p>
                    </div>

                    <form id="editAddressForm" class="space-y-6" enctype="application/x-www-form-urlencoded">
                        <input type="hidden" id="editAddressId" name="id">
                        <div class="space-y-2">
                            <label class="block text-text-primary font-semibold text-sm uppercase tracking-wide">Address Type</label>
                            <div class="grid grid-cols-3 gap-3">
                                <label
                                    class="flex items-center justify-center p-3 border-2 border-gray-200 rounded-xl cursor-pointer hover:border-accent transition duration-300">
                                    <input type="radio" name="editType" value="home" class="sr-only">
                                    <div class="text-center">
                                        <i class="fas fa-home text-green-600 text-xl mb-1"></i>
                                        <p class="text-sm font-medium">Home</p>
                                    </div>
                                </label>
                                <label
                                    class="flex items-center justify-center p-3 border-2 border-gray-200 rounded-xl cursor-pointer hover:border-accent transition duration-300">
                                    <input type="radio" name="editType" value="work" class="sr-only">
                                    <div class="text-center">
                                        <i class="fas fa-building text-blue-600 text-xl mb-1"></i>
                                        <p class="text-sm font-medium">Work</p>
                                    </div>
                                </label>
                                <label
                                    class="flex items-center justify-center p-3 border-2 border-gray-200 rounded-xl cursor-pointer hover:border-accent transition duration-300">
                                    <input type="radio" name="editType" value="other" class="sr-only">
                                    <div class="text-center">
                                        <i class="fas fa-map-marker-alt text-purple-600 text-xl mb-1"></i>
                                        <p class="text-sm font-medium">Other</p>
                                    </div>
                                </label>
                            </div>
                        </div>
                        <div class="space-y-2 relative">
                            <label for="editStreet" class="block text-text-primary font-semibold text-sm">
                                <i class="fas fa-road text-accent mr-2"></i>Street Address
                            </label>
                            <input 
                                type="text" 
                                id="editStreet" 
                                name="street" 
                                data-autocomplete="true"
                                class="w-full p-4 border-2 border-gray-200 rounded-xl focus:outline-none focus:border-accent focus:ring-2 focus:ring-accent-light transition duration-300 input-focus"
                                placeholder="Enter street address">
                            <ul id="photonSuggestionContainerEdit"
                                class="absolute left-0 top-full mt-1 w-full bg-white border border-gray-300 rounded-lg shadow-lg hidden z-50 max-h-60 overflow-y-auto">
                            </ul>
                        </div>
                        <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                            <div class="space-y-2">
                                <label for="editCity" class="block text-text-primary font-semibold text-sm">
                                    <i class="fas fa-city text-accent mr-2"></i>City
                                </label>
                                <input type="text" id="editCity" name="city"
                                    class="w-full p-4 border-2 border-gray-200 rounded-xl focus:outline-none focus:border-accent focus:ring-2 focus:ring-accent-light transition duration-300 input-focus"
                                    placeholder="Select from suggestions" readonly>
                            </div>
                            <div class="space-y-2">
                                <label for="editState" class="block text-text-primary font-semibold text-sm">
                                    <i class="fas fa-map text-accent mr-2"></i>State
                                </label>
                                <input type="text" id="editState" name="state"
                                    class="w-full p-4 border-2 border-gray-200 rounded-xl focus:outline-none focus:border-accent focus:ring-2 focus:ring-accent-light transition duration-300 input-focus"
                                    placeholder="Select from suggestions" readonly>
                            </div>
                        </div>
                        <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                            <div class="space-y-2">
                                <label for="editPin" class="block text-text-primary font-semibold text-sm">
                                    <i class="fas fa-mail-bulk text-accent mr-2"></i>Pin Code
                                </label>
                                <input type="text" id="editPin" name="pin"
                                    class="w-full p-4 border-2 border-gray-200 rounded-xl focus:outline-none focus:border-accent focus:ring-2 focus:ring-accent-light transition duration-300 input-focus"
                                    placeholder="Select from suggestions" readonly>
                            </div>
                            <div class="space-y-2">
                                <label for="editPhone" class="block text-text-primary font-semibold text-sm">
                                    <i class="fas fa-phone-alt text-accent mr-2"></i>Phone Number
                                </label>
                                <div class="flex">
                                    <span class="inline-flex items-center px-3 rounded-l-xl border-2 border-gray-200 bg-gray-100 text-gray-700">+91</span>
                                    <input type="tel" id="editPhone" name="phone"
                                        class="w-full p-4 border-2 border-gray-200 border-l-0 rounded-r-xl focus:outline-none focus:border-accent focus:ring-2 focus:ring-accent-light transition duration-300 input-focus"
                                        placeholder="9876543210" pattern="[0-9]{10}"
                                       >
                                </div>
                                <p class="text-text-secondary text-xs mt-1">Enter exactly 10 digits</p>
                            </div>
                        </div>
                        <div class="space-y-2">
                            <label for="editCountry" class="block text-text-primary font-semibold text-sm">
                                <i class="fas fa-globe text-accent mr-2"></i>Country
                            </label>
                            <input id="editCountry" name="country"
                                class="w-full p-4 border-2 border-gray-200 rounded-xl focus:outline-none focus:border-accent focus:ring-2 focus:ring-accent-light transition duration-300 input-focus"
                                value="India" readonly>
                        </div>
                        <div class="flex space-x-3 pt-4">
                            <button type="button" onclick="closeEditAddressModal()" class="flex-1 btn-secondary">
                                Cancel
                            </button>
                            <button type="submit" id="editAddressBtn" class="flex-1 btn-primary">
                                <i class="fas fa-save mr-2"></i>Update Address
                            </button>
                        </div>
                    </form>
                </div>
            </div>

            <script>
                function showToast(message, type = 'success') {
                    const toast = document.createElement('div');
                    toast.className = `toast ${type}`;
                    toast.textContent = message;
                    document.getElementById('toastContainer').appendChild(toast);
                    setTimeout(() => toast.classList.add('show'), 10);
                    setTimeout(() => {
                        toast.classList.remove('show');
                        setTimeout(() => {
                            if (document.getElementById('toastContainer').contains(toast)) {
                                document.getElementById('toastContainer').removeChild(toast);
                            }
                        }, 300);
                    }, 3000);
                }

                document.addEventListener('DOMContentLoaded', function () {
                    const radioGroups = document.querySelectorAll('input[type="radio"]');
                    radioGroups.forEach(radio => {
                        radio.addEventListener('change', function () {
                            const groupName = this.name;
                            document.querySelectorAll(`input[name="${groupName}"]`).forEach(input => {
                                input.closest('label').classList.remove('border-accent', 'bg-accent/10');
                            });
                            if (this.checked) {
                                this.closest('label').classList.add('border-accent', 'bg-accent/10');
                            }
                        });
                        if (radio.checked) {
                            radio.closest('label').classList.add('border-accent', 'bg-accent/10');
                        }
                    });
                });

                function openAddAddressModal() {
                    document.getElementById('addAddressModal').classList.remove('hidden');
                    document.body.style.overflow = 'hidden';
                }

                function closeAddAddressModal() {
                    document.getElementById('addAddressModal').classList.add('hidden');
                    document.getElementById('addAddressForm').reset();
                    document.body.style.overflow = 'auto';
                    document.querySelectorAll('input[name="type"]').forEach(input => {
                        input.closest('label').classList.remove('border-accent', 'bg-accent/10');
                    });
                    document.querySelector('input[name="type"][value="home"]').closest('label').classList.add('border-accent', 'bg-accent/10');
                }

                function handleEditClick(btn) {
                    openEditAddressModal(
                        btn.dataset.id,
                        btn.dataset.street,
                        btn.dataset.city,
                        btn.dataset.state,
                        btn.dataset.pin,
                        btn.dataset.country,
                        btn.dataset.type,
                        btn.dataset.phone
                    );
                }

                function openEditAddressModal(id, street, city, state, pin, country, type, phone) {
                    document.getElementById('editAddressId').value = id;
                    document.getElementById('editStreet').value = street;
                    document.getElementById('editCity').value = city;
                    document.getElementById('editState').value = state;
                    document.getElementById('editPin').value = pin;
                    document.getElementById('editCountry').value = country;
                    document.getElementById('editPhone').value = phone;

                    document.querySelectorAll('input[name="editType"]').forEach(input => {
                        input.closest('label').classList.remove('border-accent', 'bg-accent/10');
                    });
                    document.querySelector(`input[name="editType"][value="${type}"]`).checked = true;
                    document.querySelector(`input[name="editType"][value="${type}"]`).closest('label').classList.add('border-accent', 'bg-accent/10');

                    document.getElementById('editAddressModal').classList.remove('hidden');
                    document.body.style.overflow = 'hidden';
                }

                function closeEditAddressModal() {
                    document.getElementById('editAddressModal').classList.add('hidden');
                    document.getElementById('editAddressForm').reset();
                    document.body.style.overflow = 'auto';
                    document.querySelectorAll('input[name="editType"]').forEach(input => {
                        input.closest('label').classList.remove('border-accent', 'bg-accent/10');
                    });
                }

                document.getElementById('addAddressModal').addEventListener('click', function (e) {
                    if (e.target === this) {
                        closeAddAddressModal();
                    }
                });

                document.getElementById('editAddressModal').addEventListener('click', function (e) {
                    if (e.target === this) {
                        closeEditAddressModal();
                    }
                });

                document.getElementById('addAddressForm').addEventListener('submit', async function (event) {
                    event.preventDefault();
                    const form = event.target;
                    const formData = new FormData(form);
                    const data = Object.fromEntries(formData);

                    // Check if all fields are empty
                    if (!data.type && !data.street && !data.city && !data.state && !data.pin && !data.phone) {
                        showToast('Please fill at least one field', 'error');
                        return;
                    }

                    const addBtn = document.getElementById('addAddressBtn');
                    const originalText = addBtn.innerHTML;
                    addBtn.disabled = true;
                    addBtn.innerHTML = '<div class="loading-spinner mr-2"></div>Saving...';

                    try {
                        console.log('Sending form data:', data);
                        const response = await fetch('/add-address', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify(data)
                        });
                        const result = await response.json();

                        if (response.ok) {
                            showToast('Address added successfully!', 'success');
                            setTimeout(() => {
                                closeAddAddressModal();
                                location.reload();
                            }, 1500);
                        } else {
                            throw new Error(result.message || 'Failed to add address');
                        }
                    } catch (error) {
                        showToast(error.message, 'error');
                    } finally {
                        addBtn.disabled = false;
                        addBtn.innerHTML = originalText;
                    }
                });

                document.getElementById('editAddressForm').addEventListener('submit', async function (event) {
                    event.preventDefault();
                    const form = event.target;
                    const formData = new FormData(form);
                    const data = Object.fromEntries(formData);

                    // Check if all fields are empty
                    if (!data.editType && !data.street && !data.city && !data.state && !data.pin && !data.phone) {
                        showToast('Please fill at least one field', 'error');
                        return;
                    }

                    const editBtn = document.getElementById('editAddressBtn');
                    const originalText = editBtn.innerHTML;
                    editBtn.disabled = true;
                    editBtn.innerHTML = '<div class="loading-spinner mr-2"></div>Updating...';

                    try {
                        console.log('Sending form data:', data);
                        const response = await fetch('/update-address', {
                            method: 'PUT',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify(data)
                        });
                        const result = await response.json();

                        if (response.ok) {
                            showToast('Address updated successfully!', 'success');
                            setTimeout(() => {
                                closeEditAddressModal();
                                location.reload();
                            }, 1500);
                        } else {
                            throw new Error(result.message || 'Failed to update address');
                        }
                    } catch (error) {
                        showToast(error.message, 'error');
                    } finally {
                        editBtn.disabled = false;
                        editBtn.innerHTML = originalText;
                    }
                });

                function deleteAddress(userId, addressId) {
                    Swal.fire({
                        title: 'Remove Address?',
                        toast: true,
                        text: 'This action cannot be undone.',
                        icon: 'warning',
                        iconColor: 'rgb(215, 175, 45)',
                        showCancelButton: true,
                        timer: 5000,
                        timerProgressBar: true,
                        confirmButtonText: 'Yes, remove it',
                        cancelButtonText: 'Cancel',
                        confirmButtonColor: 'rgb(215, 175, 45)',
                        cancelButtonColor: '#6b7280',
                        width: '380px',
                        allowOutsideClick: false,
                        customClass: {
                            popup: 'rounded-2xl p-4',
                            title: 'text-3xl font-bold',
                            htmlContainer: 'text-xl',
                            confirmButton: 'rounded-lg px-4 py-1 text-sm font-medium',
                            cancelButton: 'rounded-lg px-4 py-1 text-sm font-medium'
                        }
                    }).then((result) => {
                        if (result.isConfirmed) {
                            showToast('Deleting address...', 'info');
                            fetch('/delete-address', {
                                method: 'DELETE',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({ userId, addressId })
                            })
                                .then(response =>
                                    response.json().then(data => ({
                                        ok: response.ok,
                                        status: response.status,
                                        body: data
                                    }))
                                )
                                .then(({ ok, body }) => {
                                    if (ok) {
                                        showToast('Address deleted successfully!', 'success');
                                        setTimeout(() => location.reload(), 1500);
                                    } else {
                                        throw new Error(body.message || 'Failed to delete address.');
                                    }
                                })
                                .catch(error => {
                                    showToast(error.message || 'An error occurred while deleting the address.', 'error');
                                });
                        }
                    });
                }

                document.addEventListener('DOMContentLoaded', function() {
                    setTimeout(() => {
                        showToast('Manage your delivery addresses here!', 'info');
                    }, 1000);
                });

                function viewOnMap(street, city, state, pin) {
                    showToast('Map view feature coming soon!', 'info');
                }

                (function () {
                    const API_BASE = 'https://photon.komoot.io/api/?q=';
                    const DEBOUNCE_MS = 300;
                    let currentTimeout = null;

                    function setupAutocomplete(input, suggestionBox) {
                        if (!input || !suggestionBox) return;

                        input.addEventListener('input', () => {
                            const query = input.value.trim();
                            if (query.length < 2) {
                                suggestionBox.classList.add('hidden');
                                return;
                            }

                            if (currentTimeout) clearTimeout(currentTimeout);
                            currentTimeout = setTimeout(async () => {
                                try {
                                    const res = await fetch(`${API_BASE}${encodeURIComponent(query)}&limit=5`);
                                    const data = await res.json();
                                    const features = data.features || [];
                                    suggestionBox.innerHTML = '';

                                    if (!features.length) {
                                        suggestionBox.classList.add('hidden');
                                        return;
                                    }

                                    features.forEach((f) => {
                                        const props = f.properties || {};
                                        const text = [props.name, props.city, props.state, props.country].filter(Boolean).join(', ');
                                        const li = document.createElement('li');
                                        li.textContent = text;
                                        li.className = 'p-2 hover:bg-gray-100 cursor-pointer';
                                        li.addEventListener('click', () => {
                                            input.value = text;
                                            suggestionBox.classList.add('hidden');

                                            const isEdit = input.id.startsWith('edit');
                                            document.getElementById(isEdit ? 'editCity' : 'city').value = props.city || '';
                                            document.getElementById(isEdit ? 'editState' : 'state').value = props.state || '';
                                            document.getElementById(isEdit ? 'editCountry' : 'country').value = props.country || '';
                                            if (props.postcode)
                                                document.getElementById(isEdit ? 'editPin' : 'pin').value = props.postcode;
                                        });
                                        suggestionBox.appendChild(li);
                                    });

                                    suggestionBox.classList.remove('hidden');
                                } catch (err) {
                                    console.error('Error fetching suggestions:', err);
                                }
                            }, DEBOUNCE_MS);
                        });

                        document.addEventListener('click', (e) => {
                            if (!input.contains(e.target) && !suggestionBox.contains(e.target)) {
                                suggestionBox.classList.add('hidden');
                            }
                        });
                    }

                    document.addEventListener('DOMContentLoaded', () => {
                        setupAutocomplete(
                            document.getElementById('street'),
                            document.getElementById('photonSuggestionContainerAdd')
                        );
                        setupAutocomplete(
                            document.getElementById('editStreet'),
                            document.getElementById('photonSuggestionContainerEdit')
                        );
                    });
                })();
            </script>
</body>
</html>