<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Eon Forge - Order Details</title>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    <link
        href="https://fonts.googleapis.com/css2?family=Inter:wght@300;500;600;800&family=Playfair+Display:wght@400;500;700&display=swap"
        rel="stylesheet">

    <script>
        tailwind.config = {
            theme: {
                extend: {
                    fontFamily: {
                        'inter': ['Inter', 'sans-serif'],
                        'playfair': ['Playfair Display', 'serif'],
                    },
                    colors: {
                        'primary': '#1a1a1a',
                        'accent': '#d4af37',
                        'accent-light': '#f4e4a6',
                        'cream': '#ffffff',
                        'warm-gray': '#f8f9fa',
                        'text-primary': '#2d2d2d',
                        'text-secondary': '#6b7280',
                    },
                    animation: {
                        'fade-in': 'fadeIn 0.5s ease-in-out',
                        'slide-in': 'slideIn 0.5s ease-out',
                        'pulse-glow': 'pulseGlow 0.2s ease-in-out infinite',
                        'modal-in': 'modalIn 0.3s ease-out',
                        'modal-out': 'modalOut 0.3s ease-in',
                    },
                    keyframes: {
                        fadeIn: {
                            from: { opacity: '0', transform: 'translateY(20px)' },
                            to: { opacity: '1', transform: 'translateY(0)' },
                        },
                        slideIn: {
                            from: { transform: 'translateY(15px)', opacity: '0' },
                            to: { transform: 'translateY(0)', opacity: '1' },
                        },
                        pulseGlow: {
                            '0%, 100%': { boxShadow: '0 0 10px rgba(212, 175, 55, 0.3)' },
                            '50%': { boxShadow: '0 0 20px rgba(212, 175, 55, 0.5)' },
                        },
                        modalIn: {
                            from: { opacity: '0', transform: 'scale(0.95)' },
                            to: { opacity: '1', transform: 'scale(1)' },
                        },
                        modalOut: {
                            from: { opacity: '1', transform: 'scale(1)' },
                            to: { opacity: '0', transform: 'scale(0.95)' },
                        },
                    },
                },
            },
        };
    </script>

    <style>
        /* Enhanced Toast notification */
        .toast {
            position: fixed;
            bottom: 1rem;
            right: 1rem;
            background-color: #333333;
            color: white;
            padding: 0.75rem 1.25rem;
            border-radius: 0.375rem;
            border-left: 4px solid #666666;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            opacity: 0;
            transition: all 0.3s ease;
            z-index: 50;
            font-size: 0.875rem;
            font-weight: 500;
            max-width: 300px;
            transform: translateY(10px);
        }

        .toast.show {
            opacity: 1;
            transform: translateY(0);
        }

        .toast.success {
            background-color: #333333;
            border-left-color: #10b981;
        }

        .toast.error {
            background-color: #333333;
            border-left-color: #ef4444;
        }

        .toast.warning {
            background-color: #333333;
            border-left-color: #f59e0b;
        }

        .toast.info {
            background-color: #333333;
            border-left-color: #3b82f6;
        }

        .gradient-bg {
            background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
        }

        .glass-effect {
            backdrop-filter: blur(12px);
            background: rgba(255, 255, 255, 0.95);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .premium-shadow {
            box-shadow: 0 10px 24px rgba(0, 0, 0, 0.08);
        }

        .btn-primary {
            background: linear-gradient(45deg, #d4af37 0%, #f4e4a6 100%);
            color: #1a1a1a;
            font-weight: 600;
            padding: 0.75rem 1.5rem;
            border-radius: 0.75rem;
            border: none;
            cursor: pointer;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(212, 175, 55, 0.4);
        }

        .btn-secondary {
            background: #f8fafc;
            color: #64748b;
            border: 2px solid #e2e8f0;
            font-weight: 500;
            padding: 0.75rem 1.5rem;
            border-radius: 0.75rem;
            cursor: pointer;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }

        .btn-secondary:hover {
            background: #f1f5f9;
            border-color: #cbd5e1;
            transform: translateY(-1px);
        }

        .btn-cancel {
            background: #fef2f2;
            color: #dc2626;
            border: 2px solid #fee2e2;
            font-weight: 500;
            padding: 0.5rem 1rem;
            border-radius: 0.5rem;
            cursor: pointer;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 0.25rem;
            font-size: 0.875rem;
        }

        .btn-cancel:hover {
            background: #fee2e2;
            border-color: #f87171;
            transform: translateY(-1px);
        }

        .btn-return {
            background: #ede9fe;
            color: #7c3aed;
            border: 2px solid #ddd6fe;
            font-weight: 500;
            padding: 0.5rem 1rem;
            border-radius: 0.5rem;
            cursor: pointer;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 0.25rem;
            font-size: 0.875rem;
        }

        .btn-return:hover {
            background: #ddd6fe;
            border-color: #a78bfa;
            transform: translateY(-1px);
        }

        .order-item-hover {
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .order-item-hover:hover {
            transform: translateY(-4px);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
        }

        .modal-overlay {
            position: fixed;
            inset: 0;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 50;
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .modal-overlay.show {
            opacity: 1;
        }

        .modal-content {
            animation: modalIn 0.3s ease-out;
        }

        .modal-content.closing {
            animation: modalOut 0.3s ease-in;
        }

        .textarea-resize {
            resize: vertical;
            min-height: 100px;
            max-height: 200px;
        }

        .loading-spinner {
            border: 2px solid #f3f3f3;
            border-top: 2px solid #d4af37;
            border-radius: 50%;
            width: 16px;
            height: 16px;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .reason-radio {
            accent-color: #d4af37;
        }

        .reason-radio:checked + label {
            background-color: #f4e4a6;
            border-color: #d4af37;
        }
    </style>
</head>

<body class="gradient-bg font-inter min-h-screen">
    <!-- Breadcrumb -->
    <nav class="bg-white/70 px-4 py-4 border-b border-gray-100">
        <div class="max-w-7xl mx-auto">
            <div class="flex items-center space-x-3 text-sm">
                <a href="/"
                    class="text-text-secondary hover:text-accent transition-colors font-medium flex items-center space-x-1">
                    <i class="fas fa-home"></i>
                    <span>Home</span>
                </a>
                <i class="fas fa-chevron-right text-xs text-gray-300"></i>
                <a href="/orders" class="text-text-secondary hover:text-accent transition-colors font-medium">Orders</a>
                <i class="fas fa-chevron-right text-xs text-gray-300"></i>
                <span class="text-primary font-semibold">Order Details</span>
            </div>
        </div>
    </nav>

    <!-- Main Content -->
    <main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
        <!-- Page Header -->
        <div class="text-center mb-12 animate-fade-in">
            <h1 class="text-4xl md:text-5xl font-playfair font-bold text-primary mb-4">Order Details</h1>
            <p class="text-text-secondary text-lg max-w-2xl mx-auto">
                Order <span class="font-semibold text-accent">#ORD-<%= order.orderId.slice(1,8) || 'N/A' %></span> placed on
                <%const date=new Date(order.createdOn)%>
                    <span class="font-semibold">
                        <%=date.getDate()%>/<%=date.getMonth()+1%>/<%=date.getFullYear()%>
                    </span>
            </p>
        </div>

        <!-- Order Details Section -->
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
            <!-- Left Column: Order Items and Summary -->
            <div class="lg:col-span-2 space-y-8">
                <!-- Order Items -->
                <div class="glass-effect rounded-3xl p-8 premium-shadow animate-slide-in">
                    <h2 class="text-2xl font-playfair font-bold text-primary mb-6 flex items-center">
                        <i class="fas fa-box text-accent mr-2"></i>
                        Items Ordered
                    </h2>
                    <div id="orderItemsList" class="space-y-6">
                        <% (cartItems || []).forEach((item, index)=> { %>
                            <div class="order-item-hover bg-warm-gray p-6 rounded-xl flex flex-col sm:flex-row sm:items-center gap-4"
                                style="animation-delay: <%= index * 0.1 %>s">

                                <!-- Product Image -->
                                <img src="<%= item.productImage || '/placeholder-watch.jpg' %>"
                                    alt="<%= item.productName %>"
                                    class="w-20 h-20 object-cover rounded-lg border border-gray-100">

                                <!-- Product Details -->
                                <div class="flex-1">
                                    <h4 class="text-lg font-semibold text-primary">
                                        <%= item.productName %>
                                    </h4>
                                    <p class="text-text-secondary text-sm">
                                        <%= item.brandName || 'Eon Forge' %>
                                    </p>

                                    <!-- Product Specifications -->
                                    <div class="flex flex-wrap gap-x-4 gap-y-1 mt-2 text-sm text-text-secondary">
                                        <p>Qty: <%= item.quantity %>
                                        </p>
                                        <% if (item.color) { %>
                                            <p>Color: <%= item.color %>
                                            </p>
                                            <% } %>
                                    </div>

                                    <div class="mt-3">
                                        <%
  const statusStyles = {
    'Pending': 'bg-yellow-100 text-yellow-800 border-yellow-200',
    'Processing': 'bg-blue-100 text-blue-800 border-blue-200',
    'Shipped': 'bg-purple-100 text-purple-800 border-purple-200',
    'Delivered': 'bg-green-100 text-green-800 border-green-200',
    'Cancelled': 'bg-red-100 text-red-800 border-red-200',
    'Return Request': 'bg-orange-100 text-orange-800 border-orange-200',
    'Returned': 'bg-gray-100 text-gray-800 border-gray-200',
    'Rejected': 'bg-red-200 text-red-900 border-red-300'
  };

  const statusIcons = {
    'Pending': 'fa-hourglass-start',
    'Processing': 'fa-cog fa-spin',
    'Shipped': 'fa-truck',
    'Delivered': 'fa-check-circle',
    'Cancelled': 'fa-times-circle',
    'Return Request': 'fa-undo',
    'Returned': 'fa-exchange-alt',
    'Rejected': 'fa-ban'
  };

  const status = item.status || 'Processing';
  const statusClass = statusStyles[status] || 'bg-gray-100 text-gray-800 border-gray-200';
  const statusIcon = statusIcons[status] || 'fa-question-circle';
%>

<div class="flex items-center gap-2">
  <span class="text-sm font-medium text-gray-600">Status:</span>
  <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium border <%= statusClass %>">
    <i class="fas <%= statusIcon %> mr-1"></i>
    <%= status %>
  </span>
</div>
                                    </div>
                                </div>

                                <!-- Price and Actions -->
                                <div class="flex items-center justify-between sm:justify-end gap-4">
                                    <div class="text-right">
                                        <p class="text-lg font-semibold text-primary">₹<%= (item.total ||
                                                0).toLocaleString() %>
                                        </p>
                                        <% if (item.discount>0) { %>
                                            <p class="text-xs text-green-600">Saved ₹<%= item.discount%>
                                            </p>
                                            <% } %>
                                    </div>

                                    <!-- Action Buttons -->
                                    <div class="flex flex-col gap-2">
                                        <%if(order.status !== 'Returned' && order.status !== 'Return Request' && order.status !=='Rejected' && order.status !=='Pending'){%>
                                        <% if (item.status !== 'Cancelled' && item.status !== 'Return Request' && item.status !== 'Returned' && item.status !== 'Rejected') { %>
                                            <% if (item.status === 'Delivered') { %>
                                                <button onclick="openReturnModal('<%= orderId %>', '<%= item.id %>')"
                                                    class="btn-return text-xs px-3 py-1 bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-md transition-colors">
                                                    <i class="fas fa-undo mr-1"></i> Return
                                                </button>
                                            <% } else { %>
                                                <button
                                                    class="btn-cancel text-xs px-3 py-1 bg-red-100 hover:bg-red-200 text-red-700 rounded-md transition-colors"
                                                    onclick="openCancelModal(`<%= orderId %>`,`<%= item.id %>`, `<%= item.productName %>`)">
                                                    <i class="fas fa-times mr-1"></i> Cancel
                                                </button>
                                            <% } %>
                                        <% } %>
                                       <% }%>

                                        <!-- Track Order Button (for shipped items) -->
                                        <% if (['Shipped', 'In Transit' , 'Out for Delivery'].includes(item.status)) { %>
                                            <button
                                                onclick="trackOrder('<%= orderId %>', '<%= item.id %>')"
                                                class="text-xs px-3 py-1 bg-blue-100 hover:bg-blue-200 text-blue-700 rounded-md transition-colors">
                                                <i class="fas fa-map-marker-alt mr-1"></i> Track
                                            </button>
                                        <% } %>
                                    </div>
                                </div>
                            </div>
                            <% }) %>
                    </div>
                </div>

                <!-- Order Summary -->
                <div class="glass-effect rounded-3xl p-8 premium-shadow animate-slide-in">
                    <h2 class="text-2xl font-playfair font-bold text-primary mb-6 flex items-center">
                        <i class="fas fa-receipt text-accent mr-2"></i>
                        Order Summary
                    </h2>
                    <div class="space-y-4">
                        <div class="flex justify-between text-sm">
                            <span class="text-text-secondary">Subtotal (<%= (cartItems || []).length %>
                                    <%= (cartItems || []).length===1 ? 'item' : 'items' %>)</span>
                            <span class="font-semibold text-primary">₹<%= (subtotal || 0).toLocaleString() %></span>
                        </div>
                        <% if (discount> 0) { %>
                            <div class="flex justify-between text-sm text-green-600">
                                <span class="text-text-secondary">Discount</span>
                                <span class="font-semibold">-₹<%= discount.toLocaleString() %></span>
                            </div>
                            <% } %>
                            <% if (order.couponApplied && order.couponDiscount > 0) { %>
                            <div class="flex justify-between text-sm text-green-600">
                                <span class="text-text-secondary">Coupon Discount</span>
                                <span class="font-semibold">-₹<%= (order.couponDiscount).toLocaleString() %></span>
                            </div>
                        <% } %>
                                <div class="flex justify-between text-sm">
                                    <span class="text-text-secondary">Delivery Fee</span>
                                    <span class="font-semibold text-primary">
                                        <%= deliveryFee===0 ? 'Free' : '₹' + deliveryFee.toLocaleString() %>
                                    </span>
                                </div>
                                <% if (paymentMethod==='cod' ) { %>
                                    <div class="flex justify-between text-sm">
                                        <span class="text-text-secondary">COD Fee</span>
                                        <span class="font-semibold text-primary">₹50</span>
                                    </div>
                                    <% } %>
                                        
                                    <div class="flex justify-between text-lg font-bold pt-4 border-t border-gray-100">
                            <span class="text-primary">Total</span>
                            <span class="text-primary">₹<%= order.finalAmount.toLocaleString() %></span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Right Column: Delivery & Payment Info -->
            <div class="lg:sticky lg:top-8 h-fit">
                <div class="glass-effect rounded-3xl p-8 premium-shadow animate-slide-in">
                    <!-- Delivery Address -->
                    <h2 class="text-xl font-playfair font-bold text-primary mb-4 flex items-center">
                        <i class="fas fa-map-marker-alt text-accent mr-2"></i>
                        Delivery Address
                    </h2>
                    <div class="mb-6">
                        <% const defaultAddress=(addresses || []).find(addr=> addr.isDefault) || (addresses || [])[0];
                            %>
                            <% if (defaultAddress) { %>
                                <h3 class="text-lg font-semibold text-primary">
                                    <%= fullName || 'Customer' %>
                                </h3>
                                <p class="text-text-secondary text-sm">
                                    <%= defaultAddress.address %>
                                </p>
                                <p class="text-text-secondary text-sm">
                                    <%= defaultAddress.city %>, <%= defaultAddress.state || '' %>
                                            <%= defaultAddress.pinCode %>
                                </p>
                                <p class="text-text-secondary text-sm">
                                    <%= defaultAddress.country || 'India' %>
                                </p>
                                <p class="text-text-secondary text-sm mt-2">
                                    <i class="fas fa-phone-alt mr-1"></i>
                                    <%= defaultAddress.phone || 'Not provided' %>
                                </p>
                                <% } else { %>
                                    <p class="text-text-secondary text-sm">No address found.</p>
                                    <% } %>
                    </div>

                    <!-- Payment Method -->
                    <h2 class="text-xl font-playfair font-bold text-primary mb-4 flex items-center">
                        <i class="fas fa-credit-card text-accent mr-2"></i>
                        Payment Method
                    </h2>
                    <div class="flex items-center space-x-4 mb-4">
                        <div class="w-10 h-10 bg-gray-100 rounded-full flex items-center justify-center">
                            <i class="fas <%= paymentMethod === 'cod' ? 'fa-money-bill-wave text-green-600' : 
                                              paymentMethod === 'upi' ? 'fa-mobile-alt text-blue-600' : 
                                              paymentMethod === 'netbanking' ? 'fa-university text-teal-600' : 
                                              'fa-wallet text-purple-600' %> text-lg"></i>
                        </div>
                        <div>
                            <p class="text-primary font-semibold">
                                <%= paymentMethod==='cod' ? 'Cash on Delivery' : paymentMethod==='upi' ? 'UPI Payment' :
                                    paymentMethod==='netbanking' ? 'Net Banking' : 'Wallet Payment' %>
                            </p>
                            <p class="text-text-secondary text-sm">
                                <%= paymentMethod==='cod' ? 'Pay on delivery' : 'Payment completed' %>
                            </p>
                        </div>
                    </div>
                    <p class="text-sm text-text-secondary">
                        Status: <span class="font-semibold text-green-600"><%=order.paymentStatus%></span>
                    </p>
                </div>
            </div>
        </div>

        <!-- Action Buttons -->
        <div
            class="mt-12 flex flex-col sm:flex-row justify-center space-y-4 sm:space-y-0 sm:space-x-4 animate-slide-in">
            <a href="/orders" class="btn-primary">
                <i class="fas fa-list"></i> View All Orders
            </a>
            <a href="/shop" class="btn-secondary">
                <i class="fas fa-shopping-bag"></i> Continue Shopping
            </a>
        </div>
    </main>

    <!-- Cancel Modal -->
    <div id="cancelModal" class="modal-overlay hidden">
        <div class="modal-content glass-effect rounded-2xl p-6 max-w-md w-full mx-4 premium-shadow">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-xl font-playfair font-bold text-primary">Cancel Item</h3>
                <button onclick="closeCancelModal()" class="text-gray-500 hover:text-gray-700" aria-label="Close modal">
                    <i class="fas fa-times text-lg"></i>
                </button>
            </div>
            <p class="text-text-secondary mb-4">You are about to cancel: <span id="modalProductName"
                    class="font-semibold text-primary"></span></p>
            <div class="mb-4">
                <label class="block text-sm font-medium text-primary mb-2">Reason for Cancellation</label>
                <div class="space-y-2">
                    <div class="flex items-center gap-2">
                        <input type="radio" name="cancelReason" id="cancelReason1" value="Changed my mind"
                            class="reason-radio" onchange="toggleCancelTextarea()">
                        <label for="cancelReason1"
                            class="text-sm text-text-primary cursor-pointer p-2 rounded hover:bg-accent-light w-full">Changed
                            my mind</label>
                    </div>
                    <div class="flex items-center gap-2">
                        <input type="radio" name="cancelReason" id="cancelReason2" value="Ordered by mistake"
                            class="reason-radio" onchange="toggleCancelTextarea()">
                        <label for="cancelReason2"
                            class="text-sm text-text-primary cursor-pointer p-2 rounded hover:bg-accent-light w-full">Ordered
                            by mistake</label>
                    </div>
                    <div class="flex items-center gap-2">
                        <input type="radio" name="cancelReason" id="cancelReason3" value="Product not as described"
                            class="reason-radio" onchange="toggleCancelTextarea()">
                        <label for="cancelReason3"
                            class="text-sm text-text-primary cursor-pointer p-2 rounded hover:bg-accent-light w-full">Product
                            not as described</label>
                    </div>
                    <div class="flex items-center gap-2">
                        <input type="radio" name="cancelReason" id="cancelReason4" value="Found a better price elsewhere"
                            class="reason-radio" onchange="toggleCancelTextarea()">
                        <label for="cancelReason4"
                            class="text-sm text-text-primary cursor-pointer p-2 rounded hover:bg-accent-light w-full">Found
                            a better price elsewhere</label>
                    </div>
                    <div class="flex items-center gap-2">
                        <input type="radio" name="cancelReason" id="cancelReason5" value="Delivery issues"
                            class="reason-radio" onchange="toggleCancelTextarea()">
                        <label for="cancelReason5"
                            class="text-sm text-text-primary cursor-pointer p-2 rounded hover:bg-accent-light w-full">Delivery
                            issues</label>
                    </div>
                    <div class="flex items-center gap-2">
                        <input type="radio" name="cancelReason" id="cancelReasonOther" value="Other"
                            class="reason-radio" onchange="toggleCancelTextarea()">
                        <label for="cancelReasonOther"
                            class="text-sm text-text-primary cursor-pointer p-2 rounded hover:bg-accent-light w-full">Other</label>
                    </div>
                    <div id="cancelOtherTextarea" class="hidden mt-2">
                        <textarea id="cancelOtherReason"
                            class="textarea-resize w-full p-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-accent focus:border-accent"
                            placeholder="Please provide details"></textarea>
                    </div>
                </div>
            </div>
            <div class="flex justify-end space-x-3">
                <button onclick="closeCancelModal()" class="btn-secondary">Close</button>
                <button id="cancelConfirmBtn" onclick="submitCancellation()" class="btn-cancel" disabled>
                    <i class="fas fa-check mr-1"></i> Confirm
                </button>
            </div>
        </div>
    </div>

    <!-- Return Order Modal -->
    <div id="returnModal" class="modal-overlay hidden">
        <div class="modal-content glass-effect rounded-2xl p-6 max-w-md w-full mx-4 premium-shadow">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-xl font-playfair font-bold text-primary">Return Item</h3>
                <button onclick="closeReturnModal()" class="text-gray-500 hover:text-gray-700" aria-label="Close modal">
                    <i class="fas fa-times text-lg"></i>
                </button>
            </div>
            <p class="text-text-secondary mb-4">Please select a reason for returning item #<span
                    id="returnOrderId"></span>.</p>
            <div class="mb-4">
                <label class="block text-sm font-medium text-primary mb-2">Reason for Return</label>
                <div class="space-y-2">
                    <div class="flex items-center gap-2">
                        <input type="radio" name="returnReason" id="returnReason1" value="Product not as described"
                            class="reason-radio" onchange="toggleReturnTextarea()">
                        <label for="returnReason1"
                            class="text-sm text-text-primary cursor-pointer p-2 rounded hover:bg-accent-light w-full">Product
                            not as described</label>
                    </div>
                    <div class="flex items-center gap-2">
                        <input type="radio" name="returnReason" id="returnReason2" value="Damaged or defective"
                            class="reason-radio" onchange="toggleReturnTextarea()">
                        <label for="returnReason2"
                            class="text-sm text-text-primary cursor-pointer p-2 rounded hover:bg-accent-light w-full">Damaged
                            or defective</label>
                    </div>
                    <div class="flex items-center gap-2">
                        <input type="radio" name="returnReason" id="returnReason3" value="Wrong item received"
                            class="reason-radio" onchange="toggleReturnTextarea()">
                        <label for="returnReason3"
                            class="text-sm text-text-primary cursor-pointer p-2 rounded hover:bg-accent-light w-full">Wrong
                            item received</label>
                    </div>
                    <div class="flex items-center gap-2">
                        <input type="radio" name="returnReason" id="returnReason4" value="Changed my mind"
                            class="reason-radio" onchange="toggleReturnTextarea()">
                        <label for="returnReason4"
                            class="text-sm text-text-primary cursor-pointer p-2 rounded hover:bg-accent-light w-full">Changed
                            my mind</label>
                    </div>
                    <div class="flex items-center gap-2">
                        <input type="radio" name="returnReason" id="returnReasonOther" value="Other"
                            class="reason-radio" onchange="toggleReturnTextarea()">
                        <label for="returnReasonOther"
                            class="text-sm text-text-primary cursor-pointer p-2 rounded hover:bg-accent-light w-full">Other</label>
                    </div>
                    <div id="returnOtherTextarea" class="hidden mt-2">
                        <textarea id="returnOtherReason"
                            class="textarea-resize w-full p-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-accent focus:border-accent"
                            placeholder="Please provide details"></textarea>
                    </div>
                </div>
            </div>
            <div class="flex justify-end space-x-3">
                <button onclick="closeReturnModal()" class="btn-secondary">Close</button>
                <button id="returnConfirmBtn" onclick="confirmReturnOrder()" class="btn-return" disabled>
                    <i class="fas fa-check mr-1"></i> Confirm
                </button>
            </div>
        </div>
    </div>

    <script>
        // Enhanced Toast notification functionality
        function showToast(message, type = 'success') {
            const toast = document.createElement('div');
            toast.className = `toast ${type}`;
            toast.textContent = message;
            document.body.appendChild(toast);

            setTimeout(() => toast.classList.add('show'), 10);

            setTimeout(() => {
                toast.classList.remove('show');
                setTimeout(() => document.body.removeChild(toast), 300);
            }, 3000);
        }

        let currentOrderId = null;
        let currentItemId = null;

        function openCancelModal(orderId, itemId, productName) {
            currentOrderId = orderId;
            currentItemId = itemId;
            document.getElementById('modalProductName').textContent = productName;
            document.getElementById('cancelModal').classList.remove('hidden');
            document.getElementById('cancelModal').classList.add('show');
            document.querySelectorAll('input[name="cancelReason"]').forEach(radio => radio.checked = false);
            document.getElementById('cancelOtherTextarea').classList.add('hidden');
            document.getElementById('cancelOtherReason').value = '';
            document.getElementById('cancelConfirmBtn').disabled = true;
        }

        function closeCancelModal() {
            const modal = document.getElementById('cancelModal');
            const modalContent = modal.querySelector('.modal-content');
            modalContent.classList.add('closing');
            setTimeout(() => {
                modal.classList.remove('show');
                modal.classList.add('hidden');
                modalContent.classList.remove('closing');
            }, 300);
        }

        function toggleCancelTextarea() {
            const otherRadio = document.getElementById('cancelReasonOther');
            const textareaDiv = document.getElementById('cancelOtherTextarea');
            const confirmBtn = document.getElementById('cancelConfirmBtn');
            if (otherRadio.checked) {
                textareaDiv.classList.remove('hidden');
                confirmBtn.disabled = !document.getElementById('cancelOtherReason').value.trim();
            } else {
                textareaDiv.classList.add('hidden');
                confirmBtn.disabled = !document.querySelector('input[name="cancelReason"]:checked');
            }
        }

        async function submitCancellation() {
            const selectedReason = document.querySelector('input[name="cancelReason"]:checked')?.value;
            const otherReason = document.getElementById('cancelOtherReason').value.trim();
            let reason = selectedReason;

            if (!selectedReason) {
                showToast('Please select a reason for cancellation.', 'warning');
                return;
            }

            if (selectedReason === 'Other' && !otherReason) {
                showToast('Please provide details for the cancellation.', 'warning');
                return;
            }

            if (selectedReason === 'Other') {
                reason = otherReason;
            }

            const cancelConfirmBtn = document.getElementById('cancelConfirmBtn');
            const prevHTML = cancelConfirmBtn.innerHTML;
            cancelConfirmBtn.disabled = true;
            cancelConfirmBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-1"></i>Processing...';

            try {
                const response = await fetch(`/cancel-order-item/${currentOrderId}/${currentItemId}`, {
                    method: 'PATCH',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ reason })
                });

                const data = await response.json();
                if (data.success) {
                    showToast('Item cancelled successfully.', 'success');
                    closeCancelModal();
                    setTimeout(() => location.reload(), 1500);
                } else {
                    showToast(data.message || 'Failed to cancel item.', 'error');
                }
            } catch (err) {
                console.error('Cancellation error:', err);
                showToast('Server error. Please try again.', 'error');
            } finally {
                cancelConfirmBtn.disabled = false;
                cancelConfirmBtn.innerHTML = prevHTML;
            }
        }

        function openReturnModal(orderId, itemId) {
            currentOrderId = orderId;
            currentItemId = itemId;
            document.getElementById('returnOrderId').textContent = itemId.slice(1,8);
            document.getElementById('returnModal').classList.remove('hidden');
            document.getElementById('returnModal').classList.add('show');
            document.querySelectorAll('input[name="returnReason"]').forEach(radio => radio.checked = false);
            document.getElementById('returnOtherTextarea').classList.add('hidden');
            document.getElementById('returnOtherReason').value = '';
            document.getElementById('returnConfirmBtn').disabled = true;
        }

        function closeReturnModal() {
            const modal = document.getElementById('returnModal');
            const modalContent = modal.querySelector('.modal-content');
            modalContent.classList.add('closing');
            setTimeout(() => {
                modal.classList.remove('show');
                modal.classList.add('hidden');
                modalContent.classList.remove('closing');
            }, 300);
        }

        function toggleReturnTextarea() {
            const otherRadio = document.getElementById('returnReasonOther');
            const textareaDiv = document.getElementById('returnOtherTextarea');
            const confirmBtn = document.getElementById('returnConfirmBtn');
            if (otherRadio.checked) {
                textareaDiv.classList.remove('hidden');
                confirmBtn.disabled = !document.getElementById('returnOtherReason').value.trim();
            } else {
                textareaDiv.classList.add('hidden');
                confirmBtn.disabled = !document.querySelector('input[name="returnReason"]:checked');
            }
        }

        async function confirmReturnOrder() {
            const selectedReason = document.querySelector('input[name="returnReason"]:checked')?.value;
            const otherReason = document.getElementById('returnOtherReason').value.trim();
            let reason = selectedReason;

            if (!currentOrderId || !currentItemId || !selectedReason) {
                showToast('Please select a reason for return.', 'warning');
                return;
            }

            if (selectedReason === 'Other' && !otherReason) {
                showToast('Please provide details for the return.', 'warning');
                return;
            }

            if (selectedReason === 'Other') {
                reason = otherReason;
            }

            const returnConfirmBtn = document.getElementById('returnConfirmBtn');
            const prevHTML = returnConfirmBtn.innerHTML;
            returnConfirmBtn.disabled = true;
            returnConfirmBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-1"></i>Processing...';

            try {
                const response = await fetch('/return-order-item', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        orderId: currentOrderId,
                        itemId: currentItemId,
                        reason
                    })
                });

                const data = await response.json();
                if (data.success) {
                    showToast('Your return request has been submitted!', 'success');
                    setTimeout(() => location.reload(), 1500);
                } else {
                    showToast('Unable to submit return request.', 'error');
                }
            } catch (err) {
                console.error('Return error:', err);
                showToast('Something went wrong! Please try again.', 'error');
            } finally {
                returnConfirmBtn.disabled = false;
                returnConfirmBtn.innerHTML = prevHTML;
            }
            closeReturnModal();
        }

        // Enable confirm buttons based on input
        document.getElementById('cancelOtherReason')?.addEventListener('input', function () {
            if (document.getElementById('cancelReasonOther').checked) {
                document.getElementById('cancelConfirmBtn').disabled = !this.value.trim();
            }
        });

        document.getElementById('returnOtherReason')?.addEventListener('input', function () {
            if (document.getElementById('returnReasonOther').checked) {
                document.getElementById('returnConfirmBtn').disabled = !this.value.trim();
            }
        });

        document.querySelectorAll('input[name="cancelReason"]').forEach(radio => {
            radio.addEventListener('change', toggleCancelTextarea);
        });

        document.querySelectorAll('input[name="returnReason"]').forEach(radio => {
            radio.addEventListener('change', toggleReturnTextarea);
        });

        // Track order function
        function trackOrder(orderId, itemId) {
            showToast('Tracking information loading...', 'info');
            console.log('Tracking order:', orderId, 'item:', itemId);
        }

        // Enhanced wishlist functionality
        document.addEventListener('DOMContentLoaded', function () {
            const wishlistButtons = document.querySelectorAll('.wishlist-btn');

            async function toggleWishlist(productId, button) {
                try {
                    const response = await fetch('/addWishlist', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ productId }),
                        credentials: 'include'
                    });

                    const result = await response.json();

                    if (result.success) {
                        const icon = button.querySelector('i');
                        if (result.action === 'added') {
                            button.classList.add('active');
                            icon.classList.remove('far');
                            icon.classList.add('fas', 'text-red-600');
                            showToast('Added to wishlist!', 'success');
                        } else {
                            button.classList.remove('active');
                            icon.classList.remove('fas', 'text-red-600');
                            icon.classList.add('far');
                            showToast('Removed from wishlist', 'success');
                        }
                    } else {
                        showToast(result.message || 'Error updating wishlist', 'error');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    showToast('Please login to manage wishlist', 'error');
                }
            }

            wishlistButtons.forEach(button => {
                button.addEventListener('click', async function (e) {
                    e.preventDefault();
                    const productId = this.getAttribute('data-product-id');
                    await toggleWishlist(productId, this);
                });
            });

            const orderItems = document.querySelectorAll('.order-item-hover');
            orderItems.forEach((item, index) => {
                item.style.animationDelay = `${index * 0.1}s`;
            });
        });

        // Close modals on escape key
        document.addEventListener('keydown', function (e) {
            if (e.key === 'Escape') {
                closeCancelModal();
                closeReturnModal();
            }
        });

        // Close modals when clicking outside
        document.addEventListener('click', function (e) {
            if (e.target.id === 'cancelModal') {
                closeCancelModal();
            }
            if (e.target.id === 'returnModal') {
                closeReturnModal();
            }
        });
    </script>
</body>
</html>