<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Eon Forge - Secure Checkout</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&family=Playfair+Display:wght@400;500;600;700&display=swap" rel="stylesheet">
    
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    fontFamily: {
                        'inter': ['Inter', 'sans-serif'],
                        'playfair': ['Playfair Display', 'serif'],
                    },
                    colors: {
                        'primary': '#1a1a1a',
                        'accent': '#d4af37',
                        'accent-light': '#f4e4a6',
                        'cream': '#fefdfb',
                        'warm-gray': '#f8f7f4',
                        'text-primary': '#2d2d2d',
                        'text-secondary': '#6b7280',
                    },
                    animation: {
                        'fade-in': 'fadeIn 0.5s ease-in-out',
                        'slide-up': 'slideUp 0.3s ease-out',
                        'bounce-subtle': 'bounceSubtle 0.6s ease-in-out',
                        'pulse-subtle': 'pulseSubtle 2s infinite',
                        'scale-in': 'scaleIn 0.2s ease-out',
                        'shake': 'shake 0.5s ease-in-out',
                    }
                }
            }
        }
    </script>
    
    <style>
        /* Enhanced Toast notification */
        .toast {
            position: fixed;
            bottom: 1rem;
            right: 1rem;
            background-color: #333333;
            color: white;
            padding: 0.75rem 1.25rem;
            border-radius: 0.375rem;
            border-left: 4px solid #666666;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            opacity: 0;
            transition: all 0.3s ease;
            z-index: 50;
            font-size: 0.875rem;
            font-weight: 500;
            max-width: 300px;
            transform: translateY(10px);
        }

        .toast.show {
            opacity: 1;
            transform: translateY(0);
        }

        /* Success toast */
        .toast.success {
            background-color: #333333;
            border-left-color: #10b981; /* Emerald green */
        }

        /* Error toast */
        .toast.error {
            background-color: #333333;
            border-left-color: #ef4444; /* Red */
        }

        /* Warning toast */
        .toast.warning {
            background-color: #333333;
            border-left-color: #f59e0b; /* Amber */
        }

        /* Info toast */
        .toast.info {
            background-color: #333333;
            border-left-color: #3b82f6; /* Blue */
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        @keyframes slideUp {
            from { transform: translateY(10px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }
        
        @keyframes bounceSubtle {
            0%, 100% { transform: translateY(0); }
            50% { transform: translateY(-5px); }
        }

        @keyframes pulseSubtle {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.8; }
        }

        @keyframes scaleIn {
            from { transform: scale(0.95); opacity: 0; }
            to { transform: scale(1); opacity: 1; }
        }

        @keyframes shake {
            0%, 100% { transform: translateX(0); }
            25% { transform: translateX(-5px); }
            75% { transform: translateX(5px); }
        }
        
        .address-card {
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        }
        
        .address-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 15px 35px -5px rgba(0, 0, 0, 0.12);
        }

        .address-card.selected {
            border-color: #d4af37;
            background: linear-gradient(135deg, rgba(212, 175, 55, 0.08) 0%, rgba(212, 175, 55, 0.03) 100%);
            transform: translateY(-2px);
            box-shadow: 0 10px 25px -5px rgba(212, 175, 55, 0.2);
        }

        .payment-method {
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            cursor: pointer;
        }

        .payment-method:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px -5px rgba(0, 0, 0, 0.1);
        }

        .payment-method.selected {
            border-color: #d4af37;
            background: linear-gradient(135deg, rgba(212, 175, 55, 0.1) 0%, rgba(212, 175, 55, 0.05) 100%);
            transform: translateY(-2px);
            box-shadow: 0 8px 20px -5px rgba(212, 175, 55, 0.25);
        }
        
        .gradient-bg {
            background: linear-gradient(135deg, #fefdfb 0%, #f8f7f4 100%);
        }
        
        .glass-effect {
            backdrop-filter: blur(15px);
            background: rgba(255, 255, 255, 0.95);
        }
        
        .premium-shadow {
            box-shadow: 0 20px 40px -12px rgba(0, 0, 0, 0.08);
        }

        .step-indicator {
            position: relative;
        }

        .step-indicator::after {
            content: '';
            position: absolute;
            top: 50%;
            right: -50%;
            width: 100%;
            height: 2px;
            background: #e5e7eb;
            transform: translateY(-50%);
        }

        .step-indicator.completed::after {
            background: linear-gradient(90deg, #d4af37, #f4e4a6);
        }

        .step-indicator:last-child::after {
            display: none;
        }

        .form-error {
            color: #ef4444;
            font-size: 0.75rem;
            margin-top: 0.25rem;
            display: flex;
            align-items: center;
            gap: 0.25rem;
        }

        .loading-spinner {
            border: 2px solid #f3f3f3;
            border-top: 2px solid #d4af37;
            border-radius: 50%;
            width: 16px;
            height: 16px;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .btn-primary {
            background: linear-gradient(135deg, #d4af37 0%, #f4e4a6 100%);
            color: #1a1a1a;
            font-weight: 600;
            padding: 0.75rem 1.5rem;
            border-radius: 0.75rem;
            border: none;
            cursor: pointer;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px -5px rgba(212, 175, 55, 0.4);
        }

        .btn-primary:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        .btn-secondary {
            background: #f8fafc;
            color: #64748b;
            border: 2px solid #e2e8f0;
            font-weight: 500;
            padding: 0.75rem 1.5rem;
            border-radius: 0.75rem;
            cursor: pointer;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }

        .btn-secondary:hover {
            background: #f1f5f9;
            border-color: #cbd5e1;
            transform: translateY(-1px);
        }

        .address-form-container {
            max-height: 80vh;
            overflow-y: auto;
        }

        .swal2-popup {
            border-radius: 1rem !important;
            padding: 2rem !important;
        }

        .swal2-title {
            font-family: 'Playfair Display', serif !important;
            color: #1a1a1a !important;
        }

        .swal2-html-container {
            margin: 1rem 0 !important;
        }

        .input-focus {
            transition: all 0.3s ease;
        }

        .input-focus:focus {
            outline: none;
            border-color: #d4af37;
            box-shadow: 0 0 0 3px rgba(212, 175, 55, 0.1);
        }

        .input-focus.error {
            border-color: #ef4444;
            animation: shake 0.5s ease-in-out;
        }

        .radio-label.selected {
            border-color: #d4af37;
            background: rgba(212, 175, 55, 0.1);
        }

        .coupon-card {
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            cursor: pointer;
        }

        .coupon-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px -5px rgba(0, 0, 0, 0.1);
        }

        .coupon-card.accessible:hover {
            box-shadow: 0 8px 20px -5px rgba(212, 175, 55, 0.4);
        }

        /* Added styles for coupon modal */
        #couponList {
            scroll-behavior: smooth;
        }

        #couponModal {
            transition: opacity 0.3s ease-in-out;
        }

        #couponModal .flex {
            max-height: 90vh;
            overflow: hidden;
        }
    </style>
</head>

<body class="gradient-bg font-inter min-h-screen">
    <!-- Progress Steps -->
    <div class="bg-white/90 backdrop-blur-sm border-b border-gray-100 sticky top-0 z-50">
        <div class="max-w-7xl mx-auto px-4 py-4">
            <div class="flex items-center justify-center space-x-4 md:space-x-8">
                <div class="step-indicator completed flex items-center space-x-2">
                    <div class="w-8 h-8 bg-accent rounded-full flex items-center justify-center shadow-lg">
                        <i class="fas fa-check text-white text-sm"></i>
                    </div>
                    <span class="text-sm font-medium text-accent hidden sm:inline">Cart</span>
                </div>
                <div class="step-indicator completed flex items-center space-x-2">
                    <div class="w-8 h-8 bg-accent rounded-full flex items-center justify-center shadow-lg">
                        <span class="text-white text-sm font-bold">2</span>
                    </div>
                    <span class="text-sm font-medium text-accent hidden sm:inline">Checkout</span>
                </div>
                <div class="step-indicator flex items-center space-x-2">
                    <div class="w-8 h-8 bg-gray-200 rounded-full flex items-center justify-center">
                        <span class="text-gray-500 text-sm font-bold">3</span>
                    </div>
                    <span class="text-sm font-medium text-gray-500 hidden sm:inline">Payment</span>
                </div>
                <div class="step-indicator flex items-center space-x-2">
                    <div class="w-8 h-8 bg-gray-200 rounded-full flex items-center justify-center">
                        <span class="text-gray-500 text-sm font-bold">4</span>
                    </div>
                    <span class="text-sm font-medium text-gray-500 hidden sm:inline">Confirmation</span>
                </div>
            </div>
        </div>
    </div>

    <!-- Breadcrumb -->
    <nav class="bg-white/60 px-4 py-3 border-b border-gray-50">
        <div class="max-w-7xl mx-auto">
            <div class="flex items-center space-x-3 text-sm">
                <a href="/" class="text-text-secondary hover:text-accent transition-colors font-medium flex items-center space-x-1">
                    <i class="fas fa-home"></i>
                    <span class="hidden sm:inline">Home</span>
                </a>
                <i class="fas fa-chevron-right text-xs text-gray-300"></i>
                <a href="/cart" class="text-text-secondary hover:text-accent transition-colors font-medium">Cart</a>
                <i class="fas fa-chevron-right text-xs text-gray-300"></i>
                <span class="text-primary font-semibold">Checkout</span>
            </div>
        </div>
    </nav>

    <!-- Main Content -->
    <main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6 md:py-8">
        <!-- Page Title -->
        <div class="text-center mb-8 md:mb-10 animate-fade-in">
            <h1 class="text-2xl md:text-4xl font-playfair font-bold text-primary mb-3">Secure Checkout</h1>
            <p class="text-text-secondary text-base md:text-lg max-w-2xl mx-auto">Complete your purchase with confidence and elegance</p>
        </div>

        <div id="checkoutContent" class="grid grid-cols-1 xl:grid-cols-3 gap-6 lg:gap-8">
            <!-- Left Column - Address and Payment -->
            <div class="xl:col-span-2 space-y-6">
                <!-- Delivery Address Section -->
                <div class="glass-effect rounded-2xl p-4 md:p-6 premium-shadow border border-white/20 animate-slide-up">
                    <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4 mb-6">
                        <div class="flex items-center space-x-3">
                            <div class="w-10 h-10 bg-accent/10 rounded-full flex items-center justify-center">
                                <i class="fas fa-map-marker-alt text-accent"></i>
                            </div>
                            <h2 class="text-lg md:text-xl font-playfair font-bold text-primary">Delivery Address</h2>
                        </div>
                        <button onclick="openAddressModal()" class="btn-primary text-sm">
                            <i class="fas fa-plus"></i>
                            <span>Add New</span>
                        </button>
                    </div>
                    
                    <div id="addressList" class="space-y-4">
                        <!-- Addresses will be dynamically populated -->
                    </div>
                </div>

                <!-- Payment Method Section -->
                <div class="glass-effect rounded-2xl p-4 md:p-6 premium-shadow border border-white/20 animate-slide-up" style="animation-delay: 0.1s;">
                    <div class="flex items-center space-x-3 mb-6">
                        <div class="w-10 h-10 bg-accent/10 rounded-full flex items-center justify-center">
                            <i class="fas fa-credit-card text-accent"></i>
                        </div>
                        <h2 class="text-lg md:text-xl font-playfair font-bold text-primary">Payment Method</h2>
                    </div>
                    
                    <div class="grid grid-cols-1 sm:grid-cols-2 gap-4 mb-6">
                        <!-- Credit/Debit Card -->
                        <div class="payment-method border-2 border-gray-200 rounded-xl p-4 selected" onclick="selectPaymentMethod('card',event)">
                            <div class="flex items-center justify-between mb-3">
                                <div class="flex items-center space-x-3">
                                    <div class="w-12 h-8 bg-gradient-to-r from-blue-600 to-purple-600 rounded-lg flex items-center justify-center">
                                        <i class="fas fa-credit-card text-white text-sm"></i>
                                    </div>
                                    <div>
                                        <h3 class="font-semibold text-primary text-sm">Card Payment</h3>
                                        <p class="text-xs text-text-secondary">Credit/Debit Card</p>
                                    </div>
                                </div>
                                <div class="w-5 h-5 border-2 border-gray-300 rounded-full flex items-center justify-center">
                                    <div class="w-2.5 h-2.5 bg-accent rounded-full opacity-100 transition-opacity duration-200" id="card-indicator"></div>
                                </div>
                            </div>
                            <div class="flex space-x-2">
                                <div class="w-8 h-5 bg-blue-600 rounded flex items-center justify-center">
                                    <i class="fab fa-cc-visa text-white text-xs"></i>
                                </div>
                                <div class="w-8 h-5 bg-red-600 rounded flex items-center justify-center">
                                    <i class="fab fa-cc-mastercard text-white text-xs"></i>
                                </div>
                                <div class="w-8 h-5 bg-blue-500 rounded flex items-center justify-center">
                                    <i class="fab fa-cc-amex text-white text-xs"></i>
                                </div>
                            </div>
                        </div>

                        <!-- UPI Payment -->
                        <div class="payment-method border-2 border-gray-200 rounded-xl p-4" onclick="selectPaymentMethod('upi',event)">
                            <div class="flex items-center justify-between mb-3">
                                <div class="flex items-center space-x-3">
                                    <div class="w-12 h-8 bg-gradient-to-r from-orange-500 to-red-500 rounded-lg flex items-center justify-center">
                                        <i class="fas fa-mobile-alt text-white text-sm"></i>
                                    </div>
                                    <div>
                                        <h3 class="font-semibold text-primary text-sm">UPI Payment</h3>
                                        <p class="text-xs text-text-secondary">Pay using UPI</p>
                                    </div>
                                </div>
                                <div class="w-5 h-5 border-2 border-gray-300 rounded-full flex items-center justify-center">
                                    <div class="w-2.5 h-2.5 bg-accent rounded-full opacity-0 transition-opacity duration-200" id="upi-indicator"></div>
                                </div>
                            </div>
                            <div class="flex flex-wrap gap-1">
                                <span class="text-xs bg-orange-100 text-orange-800 px-2 py-1 rounded">GPay</span>
                                <span class="text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded">PhonePe</span>
                                <span class="text-xs bg-purple-100 text-purple-800 px-2 py-1 rounded">Paytm</span>
                            </div>
                        </div>

                        <!-- Net Banking -->
                        <div class="payment-method border-2 border-gray-200 rounded-xl p-4" onclick="selectPaymentMethod('netbanking',event)">
                            <div class="flex items-center justify-between mb-3">
                                <div class="flex items-center space-x-3">
                                    <div class="w-12 h-8 bg-gradient-to-r from-green-600 to-teal-600 rounded-lg flex items-center justify-center">
                                        <i class="fas fa-university text-white text-sm"></i>
                                    </div>
                                    <div>
                                        <h3 class="font-semibold text-primary text-sm">Net Banking</h3>
                                        <p class="text-xs text-text-secondary">Online Banking</p>
                                    </div>
                                </div>
                                <div class="w-5 h-5 border-2 border-gray-300 rounded-full flex items-center justify-center">
                                    <div class="w-2.5 h-2.5 bg-accent rounded-full opacity-0 transition-opacity duration-200" id="netbanking-indicator"></div>
                                </div>
                            </div>
                            <p class="text-xs text-text-secondary">All major banks supported</p>
                        </div>

                        <!-- Cash on Delivery -->
                        <div class="payment-method border-2 border-gray-200 rounded-xl p-4" onclick="selectPaymentMethod('cod',event)">
                            <div class="flex items-center justify-between mb-3">
                                <div class="flex items-center space-x-3">
                                    <div class="w-12 h-8 bg-gradient-to-r from-gray-600 to-gray-800 rounded-lg flex items-center justify-center">
                                        <i class="fas fa-money-bill-wave text-white text-sm"></i>
                                    </div>
                                    <div>
                                        <h3 class="font-semibold text-primary text-sm">Cash on Delivery</h3>
                                        <p class="text-xs text-text-secondary">Pay when delivered</p>
                                    </div>
                                </div>
                                <div class="w-5 h-5 border-2 border-gray-300 rounded-full flex items-center justify-center">
                                    <div class="w-2.5 h-2.5 bg-accent rounded-full opacity-0 transition-opacity duration-200" id="cod-indicator"></div>
                                </div>
                            </div>
                            <div class="flex items-center space-x-2">
                                <i class="fas fa-info-circle text-blue-500 text-xs"></i>
                                <span class="text-xs text-text-secondary">₹50 handling charges apply</span>
                            </div>
                        </div>
                    </div>

                    <!-- Security Badge -->
                    <div class="bg-gradient-to-r from-green-50 to-emerald-50 border border-green-200 rounded-xl p-4">
                        <div class="flex items-center space-x-3">
                            <div class="w-10 h-10 bg-green-100 rounded-full flex items-center justify-center">
                                <i class="fas fa-shield-alt text-green-600"></i>
                            </div>
                            <div>
                                <h4 class="font-semibold text-green-800">Secure Payment</h4>
                                <p class="text-sm text-green-600">Your payment information is encrypted and secure</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Right Column - Order Summary -->
            <div class="xl:sticky xl:top-32 h-fit">
                <div class="glass-effect rounded-2xl p-4 md:p-6 premium-shadow border border-white/20 animate-slide-up" style="animation-delay: 0.2s;">
                    <div class="flex items-center space-x-3 mb-6">
                        <div class="w-10 h-10 bg-accent/10 rounded-full flex items-center justify-center">
                            <i class="fas fa-receipt text-accent"></i>
                        </div>
                        <h3 class="text-lg md:text-xl font-playfair font-bold text-primary">Order Summary</h3>
                    </div>
                    
                    <div id="cartItemsList" class="space-y-3 mb-6 max-h-80 overflow-y-auto">
                        <!-- Cart items will be dynamically populated -->
                    </div>
                    
                    <div class="flex space-x-2 mb-4">
                        
                        <input type="text" id="couponCode" class="w-full p-3 border-2 border-gray-200 rounded-xl input-focus" placeholder="Enter coupon code" readonly ondblclick="this.value=''">
                        <button onclick="openCouponModal()" class="btn-primary text-sm">
                            <i class="fas fa-ticket-alt"></i>
                            <span>Apply Coupon</span>
                        </button>
                        
                    </div>
                    
                    <div id="cartSummary" class="space-y-3 border-t border-gray-100 pt-4 mb-6">
                        <!-- Summary will be dynamically populated -->
                    </div>
                    
                    <button onclick="submitCheckout()" id="checkoutBtn" class="w-full bg-gradient-to-r from-primary to-gray-800 text-white py-4 px-6 rounded-xl font-bold text-lg hover:from-gray-800 hover:to-primary transition-all duration-300 transform hover:scale-[1.02] hover:shadow-xl flex items-center justify-center space-x-3 group disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none">
                        <span>Place Order</span>
                        <i class="fas fa-arrow-right group-hover:translate-x-1 transition-transform duration-300"></i>
                    </button>
                    
                    <div class="flex items-center justify-center space-x-2 text-sm text-text-secondary pt-4">
                        <i class="fas fa-lock text-green-600"></i>
                        <span>256-bit SSL secured checkout</span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Empty Cart State -->
        <div id="emptyCart" class="text-center py-20 hidden animate-fade-in">
            <div class="max-w-md mx-auto">
                <div class="w-32 h-32 bg-accent/10 rounded-full flex items-center justify-center mx-auto mb-8 animate-pulse-subtle">
                    <i class="fas fa-shopping-bag text-4xl text-accent"></i>
                </div>
                <h2 class="text-3xl font-playfair font-bold text-primary mb-4">Your Cart is Empty</h2>
                <p class="text-text-secondary text-lg mb-8">Discover our collection of luxury timepieces</p>
                <a href="/products" class="btn-primary">
                    <span>Explore Collection</span>
                    <i class="fas fa-arrow-right"></i>
                </a>
            </div>
        </div>

        <!-- Address Modal (Add and Edit Combined) -->
        <div id="addressModal" class="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 hidden flex items-center justify-center p-4">
            <div class="bg-white rounded-2xl p-6 w-full max-w-lg shadow-2xl address-form-container">
                <div class="text-center mb-6">
                    <div class="w-16 h-16 bg-accent-light/20 rounded-full flex items-center justify-center mx-auto mb-4">
                        <i id="modalIcon" class="fas fa-plus text-accent text-2xl"></i>
                    </div>
                    <h3 id="modalTitle" class="text-2xl font-playfair font-bold text-primary">Add New Address</h3>
                    <p id="modalSubtitle" class="text-text-secondary mt-2">Enter your delivery address details</p>
                </div>

                <form id="addressForm" class="space-y-4">
                    <input type="hidden" id="editAddressId" name="id">

                    <!-- Address Type -->
                    <div class="space-y-2">
                        <label class="block text-text-primary font-semibold text-sm uppercase">Address Type</label>
                        <div class="grid grid-cols-3 gap-3">
                            <label class="radio-label flex items-center justify-center p-3 border-2 border-gray-200 rounded-xl cursor-pointer hover:border-accent transition duration-300">
                                <input type="radio" name="type" value="home" class="sr-only" checked>
                                <div class="text-center">
                                    <i class="fas fa-home text-green-600 text-xl mb-1"></i>
                                    <p class="text-sm font-medium">Home</p>
                                </div>
                            </label>
                            <label class="radio-label flex items-center justify-center p-3 border-2 border-gray-200 rounded-xl cursor-pointer hover:border-accent transition duration-300">
                                <input type="radio" name="type" value="work" class="sr-only">
                                <div class="text-center">
                                    <i class="fas fa-building text-blue-600 text-xl mb-1"></i>
                                    <p class="text-sm font-medium">Work</p>
                                </div>
                            </label>
                            <label class="radio-label flex items-center justify-center p-3 border-2 border-gray-200 rounded-xl cursor-pointer hover:border-accent transition duration-300">
                                <input type="radio" name="type" value="other" class="sr-only">
                                <div class="text-center">
                                    <i class="fas fa-map-marker-alt text-purple-600 text-xl mb-1"></i>
                                    <p class="text-sm font-medium">Other</p>
                                </div>
                            </label>
                        </div>
                        <div id="typeError" class="form-error hidden">
                            <i class="fas fa-exclamation-circle"></i>
                            <span>Please select an address type</span>
                        </div>
                    </div>

                    <!-- Full Name -->
                    <div class="space-y-2">
                        <label for="fullName" class="block text-text-primary font-semibold text-sm">
                            <i class="fas fa-user text-accent mr-2"></i>Full Name
                        </label>
                        <input type="text" id="fullName" name="fullName" class="w-full p-3 border-2 border-gray-200 rounded-xl input-focus" placeholder="Enter full name">
                        <div id="fullNameError" class="form-error hidden">
                            <i class="fas fa-exclamation-circle"></i>
                            <span>Please enter your full name</span>
                        </div>
                    </div>

                    <!-- Street Address -->
                    <div class="space-y-2">
                        <label for="street" class="block text-text-primary font-semibold text-sm">
                            <i class="fas fa-road text-accent mr-2"></i>Street Address
                        </label>
                        <textarea id="street" name="street" class="w-full p-3 border-2 border-gray-200 rounded-xl input-focus" placeholder="Enter street address" rows="2"></textarea>
                        <div id="streetError" class="form-error hidden">
                            <i class="fas fa-exclamation-circle"></i>
                            <span>Please enter your street address</span>
                        </div>
                    </div>

                    <!-- City and State -->
                    <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                        <div class="space-y-2">
                            <label for="city" class="block text-text-primary font-semibold text-sm">
                                <i class="fas fa-city text-accent mr-2"></i>City
                            </label>
                            <input type="text" id="city" name="city" class="w-full p-3 border-2 border-gray-200 rounded-xl input-focus" placeholder="Enter city">
                            <div id="cityError" class="form-error hidden">
                                <i class="fas fa-exclamation-circle"></i>
                                <span>Please enter your city</span>
                            </div>
                        </div>
                        <div class="space-y-2">
                            <label for="state" class="block text-text-primary font-semibold text-sm">
                                <i class="fas fa-map text-accent mr-2"></i>State
                            </label>
                            <input type="text" id="state" name="state" class="w-full p-3 border-2 border-gray-200 rounded-xl input-focus" placeholder="Enter state">
                            <div id="stateError" class="form-error hidden">
                                <i class="fas fa-exclamation-circle"></i>
                                <span>Please enter your state</span>
                            </div>
                        </div>
                    </div>

                    <!-- Pin Code and Phone Number -->
                    <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                        <div class="space-y-2">
                            <label for="pinCode" class="block text-text-primary font-semibold text-sm">
                                <i class="fas fa-mail-bulk text-accent mr-2"></i>PIN Code
                            </label>
                            <input type="text" id="pinCode" name="pinCode" class="w-full p-3 border-2 border-gray-200 rounded-xl input-focus" placeholder="Enter PIN code">
                            <div id="pinCodeError" class="form-error hidden">
                                <i class="fas fa-exclamation-circle"></i>
                                <span>Please enter a valid 6-digit PIN code</span>
                            </div>
                        </div>
                        <div class="space-y-2">
                            <label for="phone" class="block text-text-primary font-semibold text-sm">
                                <i class="fas fa-phone-alt text-accent mr-2"></i>Phone Number
                            </label>
                            <input type="tel" id="phone" name="phone" class="w-full p-3 border-2 border-gray-200 rounded-xl input-focus" placeholder="e.g., 9876543210" pattern="[0-9]{10}" 
                                oninvalid="this.setCustomValidity('Please enter a 10-digit phone number (e.g., 9876543210)')"
                                oninput="this.setCustomValidity('')">
                            <p class="text-text-secondary text-xs mt-1">Enter exactly 10 digits</p>
                            <div id="phoneError" class="form-error hidden">
                                <i class="fas fa-exclamation-circle"></i>
                                <span>Please enter a valid 10-digit phone number</span>
                            </div>
                        </div>
                    </div>

                    <!-- Country -->
                    <div class="space-y-2">
                        <label for="country" class="block text-text-primary font-semibold text-sm">
                            <i class="fas fa-globe text-accent mr-2"></i>Country
                        </label>
                        <select id="country" name="country" class="w-full p-3 border-2 border-gray-200 rounded-xl input-focus">
                            <option value="India">India</option>
                            <option value="United States">United States</option>
                            <option value="Canada">Canada</option>
                            <option value="United Kingdom">United Kingdom</option>
                            <option value="Australia">Australia</option>
                        </select>
                        <div id="countryError" class="form-error hidden">
                            <i class="fas fa-exclamation-circle"></i>
                            <span>Please select a country</span>
                        </div>
                    </div>

                    <!-- Default Address Checkbox -->
                    <div class="flex items-center space-x-3 p-3 bg-gray-50 rounded-xl">
                        <input type="checkbox" id="isDefault" name="isDefault" class="w-4 h-4 text-accent border-gray-300 rounded focus:ring-accent">
                        <label for="isDefault" class="text-text-primary font-medium">
                            <i class="fas fa-star text-yellow-500 mr-2"></i>Set as default address
                        </label>
                    </div>

                    <!-- Action Buttons -->
                    <div class="flex space-x-3 pt-4">
                        <button type="button" onclick="closeAddressModal()" class="btn-secondary flex-1">
                            Cancel
                        </button>
                        <button type="submit" id="saveAddressBtn" class="btn-primary flex-1">
                            <span id="saveButtonText">Save Address</span>
                            <div id="saveButtonSpinner" class="loading-spinner hidden"></div>
                        </button>
                    </div>
                </form>
            </div>
        </div>

        <!-- Coupon Modal -->
        <div id="couponModal" class="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 hidden flex items-center justify-center p-4">
            <div class="bg-white rounded-2xl w-full max-w-md shadow-2xl glass-effect premium-shadow border border-white/20 flex flex-col max-h-[90vh]">
                <!-- Header -->
                <div class="p-6 text-center border-b border-gray-100">
                    <div class="w-16 h-16 bg-accent-light/20 rounded-full flex items-center justify-center mx-auto mb-4">
                        <i class="fas fa-ticket-alt text-accent text-2xl"></i>
                    </div>
                    <h3 class="text-2xl font-playfair font-bold text-primary">Apply Coupon</h3>
                    <p class="text-text-secondary mt-2">Select a coupon to apply to your order</p>
                </div>
                <!-- Scrollable Content -->
                <div id="couponList" class="flex-1 p-6 overflow-y-auto space-y-4">
                    <!-- Coupons will be dynamically populated -->
                </div>
                <!-- Footer -->
                <div class="p-6 border-t border-gray-100">
                    <button type="button" onclick="closeCouponModal()" class="btn-secondary w-full">
                        Cancel
                    </button>
                </div>
            </div>
        </div>
    </main>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
</body>
<script>
// Enhanced Toast notification functionality
function showToast(message, type = 'success') {
    const toast = document.createElement('div');
    toast.className = `toast ${type}`;
    toast.textContent = message;
    document.body.appendChild(toast);

    setTimeout(() => toast.classList.add('show'), 10);

    setTimeout(() => {
        toast.classList.remove('show');
        setTimeout(() => document.body.removeChild(toast), 300);
    }, 3000);
}

const cartItems = <%- JSON.stringify(cartItems || []) %>;
const userName = <%- JSON.stringify(userName || '') %>;
const defaultAddress = <%- JSON.stringify(defaultAddress || null) %>;
const otherAddresses = <%- JSON.stringify(otherAddresses || []) %>;
const razorpayKeyId = "<%= razorpayKeyId %>";
const coupons = <%- JSON.stringify(coupons || []) %>;

// Global variables
let selectedPaymentMethod = 'card';
let selectedAddressId = null;
let isEditMode = false;
let editingAddressId = null;
let selectedCoupon = null;

// Form validation
function validateForm() {
    let isValid = true;
    const fields = ['fullName', 'street', 'city', 'state', 'pinCode', 'phone', 'country'];
    
    fields.forEach(field => {
        const input = document.getElementById(field);
        const error = document.getElementById(field + 'Error');
        
        if (!input.value.trim()) {
            showFieldError(input, error);
            isValid = false;
        } else {
            hideFieldError(input, error);
            
            if (field === 'phone' && !/^\d{10}$/.test(input.value.trim())) {
                showFieldError(input, error, 'Please enter a valid 10-digit phone number');
                isValid = false;
            }
            
            if (field === 'pinCode' && !/^\d{6}$/.test(input.value.trim())) {
                showFieldError(input, error, 'Please enter a valid 6-digit PIN code');
                isValid = false;
            }
        }
    });

    const type = document.querySelector('input[name="type"]:checked');
    const typeError = document.getElementById('typeError');
    if (!type) {
        typeError.classList.remove('hidden');
        isValid = false;
    } else {
        typeError.classList.add('hidden');
    }

    return isValid;
}

function showFieldError(input, errorElement, message = null) {
    input.classList.add('error');
    errorElement.classList.remove('hidden');
    if (message) errorElement.querySelector('span').textContent = message;
}

function hideFieldError(input, errorElement) {
    input.classList.remove('error');
    errorElement.classList.add('hidden');
}

function clearFormErrors() {
    document.querySelectorAll('.input-focus').forEach(input => input.classList.remove('error'));
    document.querySelectorAll('.form-error').forEach(error => error.classList.add('hidden'));
}

// Radio button selection
function updateRadioSelection() {
    document.querySelectorAll('.radio-label').forEach(label => {
        const input = label.querySelector('input');
        if (input.checked) {
            label.classList.add('selected');
        } else {
            label.classList.remove('selected');
        }
    });
}

// Payment method selection
function selectPaymentMethod(method, event) {
    selectedPaymentMethod = method;
    document.querySelectorAll('.payment-method').forEach(el => {
        el.classList.remove('selected');
        const indicator = el.querySelector('[id$="-indicator"]');
        if (indicator) indicator.style.opacity = '0';
    });
    event.currentTarget.classList.add('selected');
    const indicator = document.getElementById(`${method}-indicator`);
    if (indicator) indicator.style.opacity = '1';
    renderCartSummary();
}

// Address rendering
function renderAddresses() {
    const addressList = document.getElementById('addressList');
    addressList.innerHTML = '';

    if (defaultAddress) {
        selectedAddressId = defaultAddress._id;
        addressList.appendChild(createAddressCard(defaultAddress, true));
    }

    if (otherAddresses && otherAddresses.length > 0) {
        otherAddresses.forEach((addr, index) => {
            const addressCard = createAddressCard(addr, false);
            addressCard.style.animationDelay = `${(index + 1) * 0.1}s`;
            addressList.appendChild(addressCard);
        });
    }

    if (!defaultAddress && (!otherAddresses || otherAddresses.length === 0)) {
        addressList.innerHTML = `
            <div class="text-center py-8 border-2 border-dashed border-gray-200 rounded-xl">
                <i class="fas fa-map-marker-alt text-3xl text-gray-300 mb-4"></i>
                <p class="text-text-secondary mb-4">No addresses found</p>
                <button onclick="openAddressModal()" class="btn-primary">
                    <i class="fas fa-plus"></i>
                    <span>Add Your First Address</span>
                </button>
            </div>
        `;
    }
}

function createAddressCard(address, isDefault) {
    const card = document.createElement('div');
    card.className = `address-card border-2 rounded-xl p-4 cursor-pointer transition-all duration-300 animate-scale-in ${
        isDefault ? 'border-accent bg-accent/5 selected' : 'border-gray-200 hover:border-accent/50'
    }`;
    
    card.onclick = () => selectAddress(address._id, card);
    
    card.innerHTML = `
        <div class="flex items-start justify-between mb-3">
            <div class="flex items-center space-x-3">
                <div class="w-5 h-5 border-2 border-gray-300 rounded-full flex items-center justify-center">
                    <div class="w-2.5 h-2.5 bg-accent rounded-full ${isDefault ? 'opacity-100' : 'opacity-0'} transition-opacity duration-200"></div>
                </div>
                <div>
                    <h3 class="font-semibold text-primary capitalize">${address.type || 'Address'} - ${address.fullName || 'User'}</h3>
                    ${isDefault ? '<span class="inline-block px-2 py-1 bg-accent/20 text-accent rounded-full text-xs font-medium mt-1">Default</span>' : ''}
                </div>
            </div>
            <div class="flex space-x-2">
                <button onclick="event.stopPropagation(); openAddressModal('${address._id}')" class="text-gray-400 hover:text-accent transition-colors p-2 rounded-lg hover:bg-accent/10">
                    <i class="fas fa-edit text-sm"></i>
                </button>
                ${!isDefault ? `<button onclick="event.stopPropagation(); removeAddress('${address._id}')" class="text-gray-400 hover:text-red-500 transition-colors p-2 rounded-lg hover:bg-red-50">
                    <i class="fas fa-trash text-sm"></i>
                </button>` : ''}
            </div>
        </div>
        <div class="text-sm text-text-secondary space-y-1 ml-8">
            <p class="flex items-center space-x-2">
                <i class="fas fa-map-marker-alt w-4 text-gray-400"></i>
                <span>${address.street || ''}</span>
            </p>
            <p class="flex items-center space-x-2">
                <i class="fas fa-city w-4 text-gray-400"></i>
                <span>${address.city || ''}, ${address.state || ''} ${address.pinCode || ''}</span>
            </p>
            <p class="flex items-center space-x-2">
                <i class="fas fa-globe w-4 text-gray-400"></i>
                <span>${address.country || ''}</span>
            </p>
            <p class="flex items-center space-x-2">
                <i class="fas fa-phone w-4 text-gray-400"></i>
                <span>${address.phone || ''}</span>
            </p>
        </div>
    `;
    
    return card;
}

function selectAddress(addressId, cardElement) {
    selectedAddressId = addressId;
    document.querySelectorAll('.address-card').forEach(card => {
        card.classList.remove('selected', 'border-accent', 'bg-accent/5');
        card.classList.add('border-gray-200');
        const indicator = card.querySelector('.w-2\\.5');
        if (indicator) indicator.style.opacity = '0';
    });
    cardElement.classList.add('selected', 'border-accent', 'bg-accent/5');
    cardElement.classList.remove('border-gray-200');
    const indicator = cardElement.querySelector('.w-2\\.5');
    if (indicator) indicator.style.opacity = '1';
}

async function removeAddress(id) {
    const result = await Swal.fire({
  title: 'Remove Address?',
  toast:true,
  text: 'This action cannot be undone.',
  icon: 'warning',
  iconColor: 'rgb(215, 175, 45)',
  showCancelButton: true,
   timer: 5000,
  timerProgressBar: true,
  confirmButtonText: 'Yes, remove it',
  cancelButtonText: 'Cancel',
  confirmButtonColor: 'rgb(215, 175, 45)',
  cancelButtonColor: '#6b7280',
  width: '380px',
  allowOutsideClick: false,
  customClass: {
    popup: 'rounded-2xl p-4',
    title: 'text-3xl font-bold',
    htmlContainer: 'text-xl',
    confirmButton: 'rounded-lg px-4 py-1 text-sm font-medium',
    cancelButton: 'rounded-lg px-4 py-1 text-sm font-medium'
  }
});


    if (result.isConfirmed) {
        try {
            const response = await fetch('/checkout-delete-address', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ addressId: id })
            });
            
            if (!response.ok) throw new Error('Failed to remove address');
            
            showToast('Address removed successfully', 'success');
            setTimeout(() => location.reload(), 1500);
        } catch (error) {
            console.error('Error removing address:', error);
            showToast('Failed to remove address. Please try again.', 'error');
        }
    }
}

// Coupon functions
function openCouponModal() {
    const modal = document.getElementById('couponModal');
    renderCoupons();
    modal.classList.remove('hidden');
    document.body.style.overflow = 'hidden';
}

function closeCouponModal() {
    document.getElementById('couponModal').classList.add('hidden');
    document.body.style.overflow = 'auto';
}

function renderCoupons() {
    const couponList = document.getElementById('couponList');
    couponList.innerHTML = '';
    const subtotal = <%= subtotal || 0 %>;
    const currentDate = new Date();

    
    coupons.forEach((coupon, index) => {
         const currentUserId = "<%= userId %>";
         console.log('userId',currentUserId)
        const useBlock=coupon.usedBy.some(u=>u.user.toString() ==currentUserId&& u.count>=coupon.usageLimit);
        const isExpired = new Date(coupon.expiryDate) < currentDate;
        const isBelowMinAmount = subtotal < coupon.minimumPurchaseAmount;
        const accessible = coupon.isActive && !isExpired && !isBelowMinAmount && !useBlock;
  console.log('useblock',useBlock)
        const couponCard = document.createElement('div');
        couponCard.className = `coupon-card border-2 rounded-xl p-4 ${
            accessible ? 'border-accent bg-accent/10 cursor-pointer' : 'border-gray-300 bg-gray-100 opacity-70 cursor-not-allowed'
        } animate-slide-up`;
        couponCard.style.animationDelay = `${index * 0.1}s`;

        couponCard.innerHTML = `
            <div class="flex items-center justify-between mb-2">
                <div class="flex items-center space-x-3">
                    <div class="w-10 h-10 bg-accent/20 rounded-full flex items-center justify-center">
                        <i class="fas fa-ticket-alt text-accent"></i>
                    </div>
                    <div>
                        <h4 class="font-semibold text-primary">${coupon.code}</h4>
                        <p class="text-xs text-text-secondary">${coupon.description}</p>
                    </div>
                </div>
                <span class="font-bold text-accent">${coupon.discountValue}${coupon.discountType === 'Percentage' ? '%' : '₹'}</span>
            </div>
            ${accessible ? '' : `
                <span class="text-xs text-red-500">
                    ${isExpired ? 'Expired' :  isBelowMinAmount ? `Minimum ₹${coupon.minimumPurchaseAmount.toLocaleString()} required`  :useBlock ? 'Reached your limit': 'Inactive'}
                </span>
            `}
        `;

        if (accessible) {
            couponCard.onclick = () => applyCoupon(coupon);
        }

        couponList.appendChild(couponCard);
    });
}

function applyCoupon(coupon) {
    if (!coupon.isActive || new Date(coupon.expiryDate) < new Date() || <%= subtotal || 0 %> < coupon.minimumPurchaseAmount) {
        showToast('This coupon is not applicable', 'error');
        return;
    }

    selectedCoupon = coupon;
    document.getElementById('couponCode').value = coupon.code;
   
    closeCouponModal();
    renderCartSummary();

    showToast(`Coupon ${coupon.code} applied successfully`, 'success');
}

// Modal functions
function openAddressModal(addressId = null) {
    const modal = document.getElementById('addressModal');
    const form = document.getElementById('addressForm');
    const title = document.getElementById('modalTitle');
    const subtitle = document.getElementById('modalSubtitle');
    const icon = document.getElementById('modalIcon');
    const saveBtn = document.getElementById('saveAddressBtn');
    const saveText = document.getElementById('saveButtonText');

    form.reset();
    clearFormErrors();
    document.querySelector('input[name="type"][value="home"]').checked = true;
    updateRadioSelection();

    if (addressId) {
        isEditMode = true;
        editingAddressId = addressId;
        title.textContent = 'Edit Address';
        subtitle.textContent = 'Update your address information';
        icon.className = 'fas fa-edit text-accent text-2xl';
        saveText.textContent = 'Update Address';
        saveBtn.className = 'flex-1 bg-gradient-to-r from-green-600 to-blue-600 text-white px-6 py-3 rounded-xl hover:from-green-700 hover:to-blue-700 transition duration-300 font-medium';

        const allAddresses = [defaultAddress, ...otherAddresses].filter(Boolean);
        const address = allAddresses.find(a => a._id === addressId);

        if (address) {
            document.querySelector(`input[name="type"][value="${address.type || 'home'}"]`).checked = true;
            document.getElementById('editAddressId').value = address._id;
            document.getElementById('fullName').value = address.fullName || '';
            document.getElementById('street').value = address.street || '';
            document.getElementById('city').value = address.city || '';
            document.getElementById('state').value = address.state || '';
            document.getElementById('pinCode').value = address.pinCode || '';
            document.getElementById('phone').value = address.phone || '';
            document.getElementById('country').value = address.country || 'India';
            document.getElementById('isDefault').checked = address.isDefault || false;
            document.getElementById('isDefault').disabled = address.isDefault;
            updateRadioSelection();
        }
    } else {
        isEditMode = false;
        editingAddressId = null;
        title.textContent = 'Add New Address';
        subtitle.textContent = 'Enter your delivery address details';
        icon.className = 'fas fa-plus text-accent text-2xl';
        saveText.textContent = 'Save Address';
        saveBtn.className = 'btn-primary flex-1';
        document.getElementById('country').value = 'India';
        document.getElementById('isDefault').disabled = false;
    }

    modal.classList.remove('hidden');
    document.body.style.overflow = 'hidden';
    setTimeout(() => document.getElementById('fullName').focus(), 100);
}

function closeAddressModal() {
    document.getElementById('addressModal').classList.add('hidden');
    document.body.style.overflow = 'auto';
    clearFormErrors();
}

// Form submission
document.getElementById('addressForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    if (!validateForm()) return;
    
    const saveBtn = document.getElementById('saveAddressBtn');
    const saveText = document.getElementById('saveButtonText');
    const saveSpinner = document.getElementById('saveButtonSpinner');
    
    saveBtn.disabled = true;
    saveText.textContent = isEditMode ? 'Updating...' : 'Saving...';
    saveSpinner.classList.remove('hidden');

    const formData = {
        type: document.querySelector('input[name="type"]:checked').value,
        fullName: document.getElementById('fullName').value.trim(),
        street: document.getElementById('street').value.trim(),
        city: document.getElementById('city').value.trim(),
        state: document.getElementById('state').value.trim(),
        pinCode: document.getElementById('pinCode').value.trim(),
        phone: document.getElementById('phone').value.trim(),
        country: document.getElementById('country').value.trim(),
        isDefault: document.getElementById('isDefault').checked
    };

    if (isEditMode) formData.addressId = editingAddressId;

    try {
        const response = await fetch(isEditMode ? '/checkout-edit-address' : '/checkout-address', {
            method: isEditMode ? 'PUT' : 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(formData)
        });

        if (!response.ok) throw new Error(`Failed to ${isEditMode ? 'update' : 'add'} address`);

        closeAddressModal();
        showToast(`Address ${isEditMode ? 'updated' : 'added'} successfully`, 'success');
        setTimeout(() => location.reload(), 1500);
    } catch (error) {
        console.error('Error saving address:', error);
        showToast(`Failed to ${isEditMode ? 'update' : 'add'} address. Please try again.`, 'error');
    } finally {
        saveBtn.disabled = false;
        saveText.textContent = isEditMode ? 'Update Address' : 'Save Address';
        saveSpinner.classList.add('hidden');
    }
});

// Radio button click handler
document.querySelectorAll('input[name="type"]').forEach(input => {
    input.addEventListener('change', updateRadioSelection);
});

// Cart rendering
function renderCartItems() {
    const cartItemsList = document.getElementById('cartItemsList');
    cartItemsList.innerHTML = '';
    
    if (!cartItems || cartItems.length === 0) {
        showEmptyCart();
        return;
    }
    
    cartItems.forEach((item, index) => {
        if (!item.id || !item.productName || !item.quantity) {
            console.warn('Invalid cart item:', item);
            return;
        }
        
        const itemDiv = document.createElement('div');
        itemDiv.className = 'flex items-center space-x-3 p-3 bg-gray-50 rounded-xl animate-slide-up';
        itemDiv.style.animationDelay = `${index * 0.1}s`;
        
        itemDiv.innerHTML = `
            <img src="${item.productImage || '/placeholder.jpg'}" alt="${item.productName}" class="w-14 h-14 object-cover rounded-lg">
            <div class="flex-1 min-w-0">
                <h4 class="font-semibold text-primary text-sm truncate">${item.productName}</h4>
                <p class="text-text-secondary text-xs">${item.brandName || 'Brand'}</p>
                <div class="flex items-center space-x-2 text-xs text-text-secondary mt-1">
                    <span>Qty: ${item.quantity}</span>
                    ${item.color ? `<span>•</span><span>${item.color}</span>` : ''}
                </div>
            </div>
            <div class="text-right">
                ${
                    item.status === "Blocked"
                    ? `<p class="text-red-500 text-sm font-semibold">Blocked</p>`
                    : `<p class="font-semibold text-primary text-sm">₹${(item.total || 0).toLocaleString()}</p>`
                }
            </div>
        `;
        
        cartItemsList.appendChild(itemDiv);
    });
    
    renderCartSummary();
}

function renderCartSummary() {
    const cartSummary = document.getElementById('cartSummary');
    const subtotal = <%= subtotal || 0 %>;
    const deliveryFee = <%= deliveryFee || 0 %>;
    const codFee = selectedPaymentMethod === 'cod' ? 50 : 0;
    let discount = 0;

    if (selectedCoupon) {
        if (selectedCoupon.discountType === 'Percentage') {
            discount = Math.round(subtotal * (selectedCoupon.discountValue / 100));
        } else {
            discount = selectedCoupon.discountValue;
        }
    }

    const total = subtotal + deliveryFee + codFee - discount;

    cartSummary.innerHTML = `
        <div class="flex justify-between items-center text-sm">
            <span class="text-text-secondary">Subtotal (${cartItems.length} items)</span>
            <span class="font-medium text-primary">₹${subtotal.toLocaleString()}</span>
        </div>
        <div class="flex justify-between items-center text-sm">
            <span class="text-text-secondary">Delivery Fee</span>
            <span class="font-medium text-primary ${deliveryFee === 0 ? 'text-green-600' : ''}">${deliveryFee === 0 ? 'Free' : '₹' + deliveryFee.toLocaleString()}</span>
        </div>
        ${codFee > 0 ? `
        <div class="flex justify-between items-center text-sm">
            <span class="text-text-secondary">COD Handling</span>
            <span class="font-medium text-primary">₹${codFee}</span>
        </div>
        ` : ''}
        ${discount > 0 ? `
        <div class="flex justify-between items-center text-sm">
            <span class="text-text-secondary">Coupon Discount (${selectedCoupon.code})</span>
            <span class="font-medium text-green-600">-₹${discount.toLocaleString()}</span>
        </div>
        ` : ''}
        <div class="border-t border-gray-200 pt-3">
            <div class="flex justify-between items-center">
                <span class="text-lg font-bold text-primary">Total</span>
                <span class="text-lg font-bold text-primary">₹${total.toLocaleString()}</span>
            </div>
        </div>
    `;
}

async function submitCheckout() {
    const checkoutBtn = document.getElementById('checkoutBtn');
    
    if (!selectedAddressId) {
        showToast('Please select a delivery address to proceed.', 'warning');
        return;
    }
    
    if (!cartItems.length) {
        showToast('Your cart is empty. Add items to proceed.', 'warning');
        return;
    }

    const subtotal = Number(<%= subtotal || 0 %>);
    const deliveryFee = Number(<%= deliveryFee || 0 %>);
    const codFee = selectedPaymentMethod === 'cod' ? 50 : 0;
    let discount = 0;
    
    if (selectedCoupon) {
        if (selectedCoupon.discountType === 'Percentage') {
            discount = Math.round(subtotal * (selectedCoupon.discountValue / 100));
        } else {
            discount = selectedCoupon.discountValue;
        }
    }
    
    const totalAmount = subtotal + deliveryFee + codFee - discount;

    if (!totalAmount || totalAmount <= 0) {
        showToast('The order total is invalid. Please check your cart and try again.', 'error');
        return;
    }

    const result = await Swal.fire({
        title: 'Confirm Your Order',
        html: `
            <div class="text-left space-y-4">
                <div class="bg-gray-50 p-4 rounded-lg">
                    <h4 class="font-semibold text-primary mb-2">Payment Method</h4>
                    <p class="text-sm text-text-secondary capitalize">${selectedPaymentMethod.replace(/([A-Z])/g, ' $1').trim()}</p>
                </div>
                ${selectedCoupon ? `
                <div class="bg-gray-50 p-4 rounded-lg">
                    <h4 class="font-semibold text-primary mb-2">Coupon Applied</h4>
                    <p class="text-sm text-text-secondary">${selectedCoupon.code}</p>
                </div>
                ` : ''}
                <div class="bg-gray-50 p-4 rounded-lg">
                    <h4 class="font-semibold text-primary mb-2">Order Total</h4>
                    <p class="text-xl font-bold text-accent">₹${totalAmount.toLocaleString()}</p>
                </div>
            </div>
        `,
        icon: 'question',
        showCancelButton: true,
        confirmButtonText: '<i class="fas fa-credit-card mr-2"></i>Place Order',
        cancelButtonText: 'Review Again',
        confirmButtonColor: '#d4af37',
        cancelButtonColor: '#6b7280',
        customClass: {
            popup: 'rounded-2xl',
            confirmButton: 'rounded-lg px-6 py-2',
            cancelButton: 'rounded-lg px-6 py-2'
        }
    });

    if (result.isConfirmed) {
        checkoutBtn.disabled = true;
        checkoutBtn.innerHTML = '<div class="loading-spinner mr-2"></div>Processing...';
        
        showToast('Processing your order...', 'info');

        try {
            const allAddresses = [defaultAddress, ...otherAddresses].filter(Boolean);
            const selectedAddress = allAddresses.find(addr => addr._id === selectedAddressId);
            
            if (selectedPaymentMethod === 'cod') {
                const response = await fetch('/place-order', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        cartItems,
                        address: selectedAddress,
                        paymentMethod: selectedPaymentMethod,
                        subtotal,
                        deliveryFee,
                        coupon: selectedCoupon,
                        totalAmount
                    })
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Failed to create order');
                }
                
                showToast('Order placed successfully!', 'success');
                setTimeout(() => {
                    window.location.href = '/place-order';
                }, 2000);
            } else  {
                    console.log('Sending to /payment/create-order:', { totalAmount });

const res = await fetch('/payment/create-order', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
        cartItems,
        address: selectedAddress,
        paymentMethod: selectedPaymentMethod,
        subtotal,
        deliveryFee,
        coupon: selectedCoupon,
        totalAmount
    })
});

if (!res.ok) {
    const errorData = await res.json();
    throw new Error(errorData.message || 'Failed to create Razorpay order');
}

const razorpayData = await res.json();
console.log('Razorpay Order Response:', razorpayData);

if (!razorpayData.success || !razorpayData.order || !razorpayData.order.amount) {
    throw new Error('Invalid Razorpay order response');
}

if (razorpayData.order.amount !== Math.round(totalAmount * 100)) {
    throw new Error('Razorpay order amount does not match cart total');
}
const dbOrderId = razorpayData.order.orderId;
const options = {
    key: razorpayKeyId,
    amount: razorpayData.order.amount,
    currency: 'INR',
    name: 'Eon Forge',
    description: 'Checkout Payment for Order',
    order_id: razorpayData.order.id,
    prefill: {
        name: userName || 'Customer',
        email: 'customer@example.com',
        contact: selectedAddress?.phone || ''
    },
    handler: async function (response) {
        console.log('Razorpay Payment Response:', response);
        try {
            const confirmRes = await fetch('/payment/verify', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    razorpay_order_id: response.razorpay_order_id,
                    razorpay_payment_id: response.razorpay_payment_id,
                    razorpay_signature: response.razorpay_signature,
                     orderId: dbOrderId,
                    cartItems,
                    address: selectedAddress,
                    paymentMethod: selectedPaymentMethod,
                    subtotal,
                    deliveryFee,
                    coupon: selectedCoupon,
                    totalAmount,
                    
                })
            });

            const confirmData = await confirmRes.json();
            if (!confirmRes.ok || !confirmData.success) {
                throw new Error(confirmData.message || 'Payment verification failed');
            }

            showToast('Payment successful! Order placed successfully.', 'success');
            setTimeout(() => {
                window.location.href = `/place-order`;
            }, 2000);
        } catch (error) {
            console.error('Error in payment verification:', error);
            showToast(error.message || 'There was an error processing your order. Please try again.', 'error');
            checkoutBtn.disabled = false;
            checkoutBtn.innerHTML = '<span>Place Order</span><i class="fas fa-arrow-right group-hover:translate-x-1 transition-transform duration-300"></i>';
        }
    },
    theme: { color: '#d4af37' },
    method: {
        upi: selectedPaymentMethod === 'upi',
        netbanking: selectedPaymentMethod === 'netbanking',
        card: selectedPaymentMethod === 'card'
    },
    modal: {
    ondismiss: function () {
        console.warn("Payment popup closed by user.");
        window.location.href = `/payment-failure?orderId=${encodeURIComponent(dbOrderId)}`;
    }
}
};

const rzp = new Razorpay(options);

rzp.on('payment.failed', async function (response) {
    console.error('Payment Failure:', response.error);
    console.log('dbOrderId:', dbOrderId); // Debug log

    // Redirect to payment-failure with orderId and error
    window.location.href = `/payment-failure?orderId=${encodeURIComponent(dbOrderId)}&error=${encodeURIComponent(response.error.description || 'Payment failed')}`;

    showToast(response.error.description || 'Something went wrong. Please try again.', 'error');

    checkoutBtn.disabled = false;
    checkoutBtn.innerHTML = '<span>Place Order</span><i class="fas fa-arrow-right group-hover:translate-x-1 transition-transform duration-300"></i>';
});


rzp.open();


                }
        } catch (error) {
            console.error('Error submitting order:', error);
            showToast(error.message || 'There was an error processing your order. Please try again.', 'error');
            checkoutBtn.disabled = false;
            checkoutBtn.innerHTML = '<span>Place Order</span><i class="fas fa-arrow-right group-hover:translate-x-1 transition-transform duration-300"></i>';
        }
    }
}

function showEmptyCart() {
    document.getElementById('checkoutContent').classList.add('hidden');
    document.getElementById('emptyCart').classList.remove('hidden');
}

// Initialize
document.addEventListener('DOMContentLoaded', () => {
    renderAddresses();
    renderCartItems();
    selectPaymentMethod('card');
    
    document.addEventListener('keydown', e => {
        if (e.key === 'Escape') {
            closeAddressModal();
            closeCouponModal();
        }
    });
    
    document.getElementById('addressModal').addEventListener('click', e => {
        if (e.target.id === 'addressModal') closeAddressModal();
    });
    
    document.getElementById('couponModal').addEventListener('click', e => {
        if (e.target.id === 'couponModal') closeCouponModal();
    });
});
</script>
</html>