<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Eon Forge - Product Management</title>
  <link href="https://cdn.jsdelivr.net/npm/cropperjs@1.5.13/dist/cropper.min.css" rel="stylesheet" />
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="https://cdn.tailwindcss.com"></script>
  <script>
    tailwind.config = {
      theme: {
        extend: {
          colors: {
            primary: '#4361ee',
            'primary-dark': '#3a56d4',
            secondary: '#3f37c9',
            success: '#4cc9f0',
            danger: '#f72585',
            warning: '#f8961e',
            info: '#4895ef',
          },
          animation: {
            'fadeIn': 'fadeIn 0.3s ease-out',
            'slideIn': 'slideIn 0.3s ease-out',
          }
        }
      }
    }
  </script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <style>
    .error-message {
      color: red;
      font-size: 0.75rem;
      display: none;
    }  

    .account-dropdown { display: none; }
    .account-wrapper:hover .account-dropdown { display: block; }
    .sidebar-menu a.active { background-color: rgba(255, 255, 255, 0.1); }
    
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(-10px); }
      to { opacity: 1; transform: translateY(0); }
    }
    
    @keyframes slideIn {
      from { opacity: 0; transform: translateY(15px); }
      to { opacity: 1; transform: translateY(0); }
    }
    
    .animate-fadeIn { animation: fadeIn 0.3s ease-out; }
    .animate-slideIn { animation: slideIn 0.3s ease-out; }
    
    .variant-entry {
      background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
      border: 2px solid #e2e8f0;
      border-radius: 12px;
      padding: 16px;
      position: relative;
      transition: all 0.3s ease;
      animation: slideIn 0.3s ease-out;
    }

    .variant-entry:hover {
      border-color: #4361ee;
      box-shadow: 0 4px 15px rgba(67, 97, 238, 0.1);
    }

    .variant-entry::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 3px;
      background: linear-gradient(90deg, #4361ee, #3f37c9);
      border-radius: 12px 12px 0 0;
    }

    .image-upload-area {
      border: 2px dashed #cbd5e1;
      border-radius: 8px;
      padding: 16px;
      text-align: center;
      transition: all 0.3s ease;
      background: white;
      cursor: pointer;
    }

    .image-upload-area:hover {
      border-color: #4361ee;
      background: #f8fafc;
    }

    .image-upload-area.dragover {
      border-color: #4361ee;
      background: #eff6ff;
      transform: scale(1.01);
    }

    .variant-image-preview {
      width: 60px;
      height: 60px;
      object-fit: cover;
      border-radius: 6px;
      border: 2px solid #e2e8f0;
      transition: all 0.3s ease;
      cursor: pointer;
    }

    .variant-image-preview:hover {
      border-color: #4361ee;
      transform: scale(1.05);
    }

    .image-counter {
      background: linear-gradient(135deg, #4361ee, #3f37c9);
      color: white;
      padding: 2px 8px;
      border-radius: 12px;
      font-size: 11px;
      font-weight: 600;
    }

    .image-counter.valid {
      background: linear-gradient(135deg, #10b981, #059669);
    }

    .image-counter.invalid {
      background: linear-gradient(135deg, #ef4444, #dc2626);
    }

    .remove-variant-btn {
      position: absolute;
      top: 8px;
      right: 8px;
      width: 24px;
      height: 24px;
      background: #ef4444;
      color: white;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      transition: all 0.3s ease;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 10px;
    }

    .remove-variant-btn:hover {
      background: #dc2626;
      transform: scale(1.1);
    }

    .action-btn {
      padding: 6px 10px;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      background: none;
      transition: all 0.2s ease;
      font-weight: 500;
      font-size: 13px;
    }

    .action-btn:hover {
      opacity: 0.9;
      transform: translateY(-1px);
    }

    .product-table {
      border-radius: 10px;
      overflow: hidden;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .product-table th {
      background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
      font-weight: 600;
      text-transform: uppercase;
      letter-spacing: 0.05em;
      font-size: 0.7rem;
      padding: 12px 16px;
    }

    .product-table td {
      padding: 12px 16px;
      font-size: 0.85rem;
    }

    .product-table tr:hover {
      background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
    }

    .pagination-btn {
      transition: all 0.2s ease;
      border: 1px solid #e2e8f0;
      background: white;
      padding: 8px;
      width: 36px;
      height: 36px;
    }

    .pagination-btn:hover:not([style*="pointer-events:none"]) {
      background: #4361ee;
      color: white;
    }

    .page-link {
      transition: all 0.2s ease;
      border: 1px solid #e2e8f0;
      padding: 6px 12px;
      font-size: 0.85rem;
    }

    .search-container {
      transition: all 0.3s ease;
      max-width: 300px;
    }

    .search-container:focus-within {
      box-shadow: 0 0 0 2px rgba(67, 97, 238, 0.1);
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
  </style>
</head>
<body class="font-sans bg-gradient-to-br from-gray-50 to-gray-100 text-gray-900 overflow-x-hidden">
  <div class="flex min-h-screen">
    <%- include("../../views/partials/admin/sidebar") %>
    
    <div class="flex-1 ml-64 min-h-screen">
      <header class="bg-white py-3 px-4 flex items-center shadow-lg sticky top-0 z-40 border-b border-gray-200">
        <button class="menu-toggle mr-3 text-lg md:hidden hover:text-primary transition-colors">
          <i class="fas fa-bars"></i>
        </button>
        
        <form action="/admin/addProducts" method="get" class="search-container flex items-center bg-gray-50 rounded-full px-3 py-2 ml-3">
          <input type="text" name="search" placeholder="Search products..." 
                 class="search-input bg-transparent border-none w-full focus:outline-none text-sm" 
                 value="<%= typeof search !== 'undefined' ? search : '' %>">
          <button type="submit" class="search-btn text-gray-500 hover:text-primary transition-colors">
            <i class="fas fa-search text-sm"></i>
          </button>
          <% if(search){ %>
            <a href="/admin/addProducts" class="search-clear-btn text-gray-500 hover:text-primary ml-2 transition-colors">
              <i class="fas fa-times text-sm"></i>
            </a>
          <% } %>
        </form>
        
        <div class="account-wrapper relative ml-auto">
          <button class="icon-btn text-lg text-gray-700 hover:text-primary transition-colors p-2 rounded-full hover:bg-gray-100" title="Account">
            <i class="fas fa-user"></i>
          </button>
          <div class="account-dropdown absolute right-0 top-full bg-white min-w-36 shadow-xl rounded-lg overflow-hidden border border-gray-200 mt-2">
            <a href="/profile" class="block px-3 py-2 text-gray-700 no-underline hover:bg-gray-50 transition-colors text-sm">
              <i class="fas fa-user mr-2 text-primary"></i> Profile
            </a>
            <a href="/admin/logout" class="block px-3 py-2 text-gray-700 no-underline hover:bg-gray-50 transition-colors text-sm">
              <i class="fas fa-sign-out-alt mr-2 text-danger"></i> Logout
            </a>
          </div>
        </div>
      </header>

      <main class="p-4">
        <div class="flex justify-between items-center mb-6">
          <div>
            <h1 class="text-2xl font-bold text-gray-800 mb-1">Product Management</h1>
            <p class="text-gray-600 text-sm">Manage your product catalog and inventory</p>
          </div>
          <button id="add-product-btn" 
                  class="bg-gradient-to-r from-primary to-secondary hover:from-primary-dark hover:to-primary text-white px-4 py-2 rounded-lg flex items-center space-x-2 transition-all duration-200 transform hover:scale-105 shadow-lg text-sm">
            <i class="fas fa-plus text-sm"></i>
            <span>Add Product</span>
          </button>
        </div>

        <div class="bg-white rounded-xl shadow-lg overflow-hidden mb-4 product-table">
          <div class="overflow-x-auto">
            <table class="w-full border-collapse">
              <thead>
                <tr class="sticky top-0 bg-white shadow-sm">
                  <th class="text-left font-semibold text-gray-600">No.</th>
                  <th class="text-left font-semibold text-gray-600">Product Name</th>
                  <th class="text-left font-semibold text-gray-600">Brand</th>
                  <th class="text-left font-semibold text-gray-600">Category</th>
                  <th class="text-left font-semibold text-gray-600">Regular Price</th>
                  <th class="text-left font-semibold text-gray-600">Discount %</th>
                  <th class="text-left font-semibold text-gray-600">Offer Price</th>
                  <th class="text-left font-semibold text-gray-600">Offer</th>
                  <th class="text-left font-semibold text-gray-600">Stock</th>
                  <th class="text-left font-semibold text-gray-600">Status</th>
                  <th class="text-left font-semibold text-gray-600">Actions</th>
                </tr>
              </thead>
              <tbody>
                <% products.forEach((product, index) => { %>
                  <% const firstVariant = (product.colorVariants && product.colorVariants.length) ? product.colorVariants[0] : null; %>
                  <tr class="hover:bg-gray-50 group border-b border-gray-100 transition-all duration-200">
                    <td>
                      <div class="flex items-center gap-2">
                        <span class="font-medium text-gray-700 text-sm"><%= (currentPage - 1) * limit + index + 1 %></span>
                        <% if (product.colorVariants && product.colorVariants.length > 1) { %>
                          <button onclick="window.toggleVariants('<%= product._id %>')" 
                                  id="toggle-btn-<%= product._id %>" 
                                  class="text-gray-400 hover:text-primary transition-all duration-200 transform hover:scale-110 p-1 rounded">
                            <i class="fas fa-chevron-right text-xs"></i>
                          </button>
                        <% } %>
                      </div>
                    </td>
                    <td>
                      <div class="font-medium text-gray-900 text-sm"><%= product.productName %></div>
                    </td>
                    <td>
                      <span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                        <%= product.brand?.brandName || 'N/A' %>
                      </span>
                    </td>
                    <td>
                      <span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-purple-100 text-purple-800">
                        <%= product.category?.name || 'N/A' %>
                      </span>
                    </td>
                    <td>
                      <span class="font-semibold text-gray-900 text-sm">
                        <%= firstVariant && firstVariant.regularPrice != null ? '$' + firstVariant.regularPrice.toFixed(2) : '—' %>
                      </span>
                    </td>
                    <td>
                      <span class="font-semibold text-green-600 text-sm">
                        <%= firstVariant && firstVariant.discountPercentage != null ? firstVariant.discountPercentage + '%' : '—' %>
                      </span>
                    </td>
                    <td>
                      <span class="font-semibold text-green-600 text-sm">
                        <%= firstVariant && firstVariant.offerPrice != null ? '$' + firstVariant.offerPrice.toFixed(2) : '—' %>
                      </span>
                    </td>
                    <td>
                      <% if (product.hasOffer || (firstVariant && firstVariant.hasOffer)) { %>
                        <span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                          <i class="fas fa-check-circle mr-1"></i>Active
                        </span>
                      <% } else { %>
                        <span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
                          <i class="fas fa-times-circle mr-1"></i>Inactive
                        </span>
                      <% } %>
                    </td>
                    <td>
                      <span class="font-medium text-sm <%= product.stockTotal > 10 ? 'text-green-600' : product.stockTotal > 0 ? 'text-yellow-600' : 'text-red-600' %>">
                        <%= product.stockTotal != null ? product.stockTotal : '—' %>
                      </span>
                    </td>
                    <td>
                      <% if (product.status === 'Available') { %>
                        <span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                          <i class="fas fa-check-circle mr-1"></i>Available
                        </span>
                      <% } else { %>
                        <span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
                          <i class="fas fa-exclamation-circle mr-1"></i>Out of Stock
                        </span>
                      <% } %>
                    </td>
                    <td>
                      <div class="flex items-center space-x-1">
                        <button onclick="window.openEditModal('<%= product._id %>')" 
                                class="text-blue-600 hover:text-blue-800 font-medium transition-colors duration-200 px-2 py-1 rounded hover:bg-blue-50 text-xs">
                          <i class="fas fa-edit mr-1"></i>Edit
                        </button>
                        <button class="action-btn rounded-lg font-medium transition-all duration-200 <%= product.isBlocked ? 'text-green-600 hover:bg-green-50' : 'text-red-600 hover:bg-red-50' %>" 
                                onclick="toggleProductStatus('<%= product._id %>', '<%= product.isBlocked ? 'true' : 'false' %>')">
                          <%= product.isBlocked ? 'Unblock' : 'Block' %>
                          <i class="fas <%= product.isBlocked ? 'fa-eye' : 'fa-eye-slash' %> ml-1"></i>
                        </button>
                      </div>
                    </td>
                  </tr>
                  
                  <% if (product.colorVariants && product.colorVariants.length > 1) { %>
                    <% product.colorVariants.slice(1).forEach((variant, idx) => { %>
                      <tr id="variant-row-<%= product._id %>-<%= idx %>" class="hidden bg-gray-50 border-b border-gray-100">
                        <td></td>
                        <td>
                          <div class="font-medium text-gray-700 text-sm">
                            <i class="fas fa-arrow-right text-gray-400 mr-2"></i>
                            <%= product.productName %> (<%= variant.colorName %>)
                          </div>
                        </td>
                        <td>
                          <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-blue-50 text-blue-700">
                            <%= product.brand?.brandName || 'N/A' %>
                          </span>
                        </td>
                        <td>
                          <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-purple-50 text-purple-700">
                            <%= product.category?.name || 'N/A' %>
                          </span>
                        </td>
                        <td>
                          <span class="font-medium text-gray-700 text-sm">
                            <%= variant.regularPrice != null ? '$' + variant.regularPrice.toFixed(2) : '—' %>
                          </span>
                        </td>
                        <td>
                          <span class="font-medium text-green-600 text-sm">
                            <%= variant.discountPercentage != null ? variant.discountPercentage + '%' : '—' %>
                          </span>
                        </td>
                        <td>
                          <span class="font-medium text-green-600 text-sm">
                            <%= variant.offerPrice != null ? '$' + variant.offerPrice.toFixed(2) : '—' %>
                          </span>
                        </td>
                        <td>
                          <% if (variant.hasOffer) { %>
                            <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-green-50 text-green-700">
                              <i class="fas fa-check mr-1"></i>Active
                            </span>
                          <% } else { %>
                            <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-red-50 text-red-700">
                              <i class="fas fa-times mr-1"></i>Inactive
                            </span>
                          <% } %>
                        </td>
                        <td>
                          <span class="font-medium text-sm <%= variant.stock > 10 ? 'text-green-600' : variant.stock > 0 ? 'text-yellow-600' : 'text-red-600' %>">
                            <%= variant.stock != null ? variant.stock : '—' %>
                          </span>
                        </td>
                        <td>
                          <% if (variant.isActive === 'Available') { %>
                            <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-green-50 text-green-700">
                              <i class="fas fa-check mr-1"></i>Available
                            </span>
                          <% } else { %>
                            <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-red-50 text-red-700">
                              <i class="fas fa-exclamation mr-1"></i>Out of Stock
                            </span>
                          <% } %>
                        </td>
                        <td>
                          <div class="flex items-center space-x-1">
                            <button onclick="window.openEditModal('<%= product._id %>', '<%= variant._id %>')" 
                                    class="text-blue-600 hover:text-blue-800 font-medium transition-colors duration-200 px-2 py-1 rounded hover:bg-blue-50 text-xs">
                              <i class="fas fa-edit mr-1"></i>Edit
                            </button>
                            <button class="action-btn rounded font-medium transition-all duration-200 <%= variant.isBlocked ? 'text-green-600 hover:bg-green-50' : 'text-red-600 hover:bg-red-50' %>"
                                    onclick="toggleVariantStatus('<%= product._id %>', '<%= variant._id %>', '<%= variant.isBlocked? 'true' : 'false' %>')">
                              <%= variant.isBlocked ? 'Unblock' : 'Block' %>
                              <i class="fas <%= variant.isBlocked ? 'fa-eye' : 'fa-eye-slash' %> ml-1"></i>
                            </button>
                          </div>
                        </td>
                      </tr>
                    <% }); %>
                  <% } %>
                <% }); %>
              </tbody>
            </table>
          </div>
           
          <div class="pagination flex justify-center items-center p-4 gap-2 bg-gray-50 border-t border-gray-200">
            <a href="?page=<%= currentPage - 1 %>" 
               class="pagination-btn rounded-lg flex items-center justify-center" 
               <% if (currentPage === 1) { %> style="pointer-events:none;opacity:0.5" <% } %>>
              <i class="fas fa-chevron-left text-sm"></i>
            </a>
            <div id="page-numbers" class="flex gap-1">
              <% for(let i = 1; i <= totalPages; i++) { %>
                <a href="?page=<%= i %>" 
                   class="page-link rounded-lg font-medium <%= i === currentPage ? 'bg-primary text-white shadow-lg' : 'bg-white text-gray-700 hover:bg-gray-100' %>">
                  <%= i %>
                </a>
              <% } %>
            </div>
            <a href="?page=<%= currentPage + 1 %>" 
               class="pagination-btn rounded-lg flex items-center justify-center" 
               <% if (currentPage >= totalPages) { %> style="pointer-events:none;opacity:0.5" <% } %>>
              <i class="fas fa-chevron-right text-sm"></i>
            </a>
          </div>
        </div>

        <div id="product-modal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden flex items-center justify-center p-3 overflow-y-auto">
          <div class="bg-white rounded-xl shadow-2xl w-full max-w-4xl animate-fadeIn max-h-[95vh] overflow-hidden">
            <div class="flex justify-between items-center p-4 border-b border-gray-200 bg-gradient-to-r from-primary to-secondary text-white">
              <div class="flex items-center space-x-2">
                <div class="w-6 h-6 bg-white bg-opacity-20 rounded-full flex items-center justify-center">
                  <i class="fas fa-box text-xs"></i>
                </div>
                <h2 id="modal-title" class="text-lg font-semibold">Add New Product</h2>
              </div>
              <button id="close-modal" class="text-white hover:text-gray-200 text-xl transition-colors duration-200 w-6 h-6 flex items-center justify-center rounded-full hover:bg-white hover:bg-opacity-20">
                <i class="fas fa-times"></i>
              </button>
            </div>

            <div class="overflow-y-auto max-h-[calc(95vh-120px)]">
              <form id="product-form" class="p-4" enctype="multipart/form-data">
                <input type="hidden" Otolaryng: id="product-id" name="productId">
                <input type="hidden" id="variant-id" name="variantId">
                
                <div class="mb-6">
                  <div class="flex items-center mb-3">
                    <div class="w-5 h-5 bg-primary rounded-full flex items-center justify-center mr-2">
                      <i class="fas fa-info text-white text-xs"></i>
                    </div>
                    <h3 class="text-md font-semibold text-gray-800">Product Information</h3>
                  </div>
                  
                  <div class="grid grid-cols-1 lg:grid-cols-2 gap-4">
                    <div class="space-y-3">
                      <div class="group">
                        <label for="product-name" class="block text-sm font-medium text-gray-700 mb-1">
                          Product Name <span class="text-red-500">*</span>
                        </label>
                        <input type="text" id="product-name" name="productName" 
                               class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition-all duration-200 text-sm"
                               placeholder="Enter product name">
                        <span class="error-message" id="error1"></span>
                      </div>
                      
                      <div class="group">
                        <label for="product-brand" class="block text-sm font-medium text-gray-700 mb-1">
                          Brand <span class="text-red-500">*</span>
                        </label>
                        <select id="product-brand" name="brand" 
                                class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition-all duration-200 text-sm">
                          <option value="">Select Brand</option>
                          <% brand.forEach(brand => { %>
                            <option value="<%= brand._id %>"><%= brand.brandName %></option>
                          <% }); %>
                        </select>
                        <span class="error-message" id="error2"></span>
                      </div>
                      
                      <div class="group">
                        <label for="product-category" class="block text-sm font-medium text-gray-700 mb-1">
                          Category <span class="text-red-500">*</span>
                        </label>
                        <select id="product-category" name="category" 
                                class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition-all duration-200 text-sm">
                          <option value="">Select Category</option>
                          <% cat.forEach(category => { %>
                            <option value="<%= category._id %>"><%= category.name %></option>
                          <% }); %>
                        </select>
                        <span class="error-message" id="error3"></span>
                      </div>
                    </div>
                    
                    <div class="space-y-3">
                      <div class="group">
                        <label for="product-description" class="block text-sm font-medium text-gray-700 mb-1">
                          Description <span class="text-red-500">*</span>
                        </label>
                        <textarea id="product-description" name="description" rows="5"  
                                  class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition-all duration-200 resize-none text-sm"
                                  placeholder="Enter detailed product description..."></textarea>
                      </div>
                      
                      <div class="bg-gray-50 p-3 rounded-lg">
                        <label class="flex items-center space-x-2 cursor-pointer">
                          <input type="checkbox" id="product-offer" name="hasOffer" 
                                 class="w-4 h-4 text-primary border-gray-300 rounded focus:ring-primary focus:ring-2">
                          <span class="text-sm font-medium text-gray-700">Enable Product-wide Offer</span>
                        </label>
                        <span class="error-message" id="error4"></span>
                        <p class="text-xs text-gray-500 mt-1">This will apply to all variants unless individually overridden</p>
                      </div>
                    </div>
                  </div>
                </div>

                <div class="mb-6">
                  <div class="flex items-center justify-between mb-3">
                    <div class="flex items-center">
                      <div class="w-5 h-5 bg-secondary rounded-full flex items-center justify-center mr-2">
                        <i class="fas fa-palette text-white text-xs"></i>
                      </div>
                      <h3 class="text-md font-semibold text-gray-800">Color Variants</h3>
                      <span class="ml-2 text-xs text-gray-500">()</span>
                    </div>
                    <button type="button" id="add-color-variant" 
                            class="bg-gradient-to-r from-primary to-secondary hover:from-primary-dark hover:to-primary text-white px-3 py-2 rounded-lg flex items-center space-x-1 transition-all duration-200 transform hover:scale-105 shadow-lg text-sm">
                      <i class="fas fa-plus text-xs"></i>
                      <span>Add Variant</span>
                    </button>
                  </div>
                  
                  <div id="color-variants-container" class="space-y-4"></div>
                </div>

                <div class="flex justify-end space-x-3 pt-4 border-t border-gray-200">
                  <button type="button" id="cancel-btn" 
                          class="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-all duration-200 font-medium text-sm">
                    Cancel
                  </button>
                  <button type="submit" 
                          class="px-6 py-2 bg-gradient-to-r from-primary to-secondary hover:from-primary-dark hover:to-primary text-white rounded-lg transition-all duration-200 font-medium shadow-lg transform hover:scale-105 text-sm">
                    <span id="submit-btn-text">Add Product</span>
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      </main>
    </div>
  </div>

  <div id="cropper-wrapper" class="fixed inset-0 bg-black bg-opacity-70 hidden items-center justify-center z-[999]">
    <div class="bg-white rounded-xl shadow-2xl p-4 max-w-lg w-full mx-3">
      <div class="mb-3">
        <h3 class="text-md font-semibold text-gray-800 mb-1">Crop Image</h3>
        <p class="text-xs text-gray-600">Adjust the crop area to get the perfect product image</p>
      </div>
      <div class="bg-gray-100 rounded-lg p-3 mb-3">
        <img id="cropper-image" class="max-h-[50vh] w-full object-contain rounded" />
      </div>
      <div class="flex justify-end gap-2">
        <button id="cropper-cancel" 
                class="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-all duration-200 text-sm">
          Cancel
        </button>
        <button id="cropper-done" 
                class="px-4 py-2 bg-primary text-white rounded-lg hover:bg-primary-dark transition-all duration-200 text-sm">
          Crop & Keep
        </button>
      </div>
    </div>
  </div>
  <script src="https://cdn.jsdelivr.net/npm/cropperjs@1.5.13/dist/cropper.min.js"></script>

  <script>
    let currentInput = null;
    let cropper = null;
    let currentFile = null;
    let currentVariantEntry = null;
    const wrap = document.getElementById("cropper-wrapper");
    const imgTag = document.getElementById("cropper-image");

    function hookCropperOn(input, variantEntry) {
      input.addEventListener("change", (e) => {
        if (!e.target.files || e.target.files.length === 0) return;
        
        const file = e.target.files[0];
        
        if (!file.type.startsWith('image/')) {
          variantEntry.querySelector(`.image-error`).textContent = "Please select a valid image file.";
          variantEntry.querySelector(`.image-error`).classList.remove("hidden");
          e.target.value = "";
          return;
        }
        
        if (file.size > 5 * 1024 * 1024) {
          variantEntry.querySelector(`.image-error`).textContent = "Image size must be less than 5MB.";
          variantEntry.querySelector(`.image-error`).classList.remove("hidden");
          e.target.value = "";
          return;
        }
        
        const existingImages = variantEntry.querySelector('.variant-image-preview-container').querySelectorAll('img').length;
        if (existingImages >= 4) {
          variantEntry.querySelector(`.image-error`).textContent = "Maximum 4 images allowed per variant.";
          variantEntry.querySelector(`.image-error`).classList.remove("hidden");
          e.target.value = "";
          return;
        }
        
        currentInput = e.target;
        currentFile = file;
        currentVariantEntry = variantEntry;
        processImage();
      });
    }

    function processImage() {
      if (!currentFile) return;
      
      imgTag.src = URL.createObjectURL(currentFile);
      wrap.classList.remove("hidden");
      if (cropper) cropper.destroy();
      cropper = new Cropper(imgTag, {
        viewMode: 2,
        aspectRatio: 1,
        responsive: true,
        restore: false,
        guides: true,
        center: true,
        highlight: false,
        cropBoxMovable: true,
        cropBoxResizable: true,
        toggleDragModeOnDblclick: false,
      });
    }

    function updateImageCounter(variantEntry) {
      const container = variantEntry.querySelector('.variant-image-preview-container');
      const imageCount = container.querySelectorAll('img').length;
      const counter = variantEntry.querySelector('.image-counter');
      
      if (counter) {
        counter.textContent = `${imageCount}/4 Images`;
        counter.className = `image-counter ${imageCount >= 3 && imageCount <= 4 ? 'valid' : 'invalid'}`;
      }
      
      const errorDiv = variantEntry.querySelector('.image-error');
      if (imageCount < 3) {
        errorDiv.textContent = "Please add between 3-4 images for this variant.";
        errorDiv.classList.remove("hidden");
      } else {
        errorDiv.classList.add("hidden");
      }
    }

    window.toggleVariants = function (productId) {
      const variantRows = document.querySelectorAll(`[id^="variant-row-${productId}"]`);
      const toggleBtn = document.getElementById(`toggle-btn-${productId}`);
      const icon = toggleBtn.querySelector('i');
      
      variantRows.forEach((row) => row.classList.toggle("hidden"));
      
      if (variantRows[0].classList.contains("hidden")) {
        icon.className = "fas fa-chevron-right text-xs";
      } else {
        icon.className = "fas fa-chevron-down text-xs";
      }
    };

    window.toggleProductStatus = async function (productId, isBlocked) {
      const action = isBlocked === 'true' ? 'unblock' : 'block';
      
      try {
        const res = await fetch(`/admin/products/${productId}/status`, {
          method: "PATCH",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ isBlocked: action === 'block' })
        });
        const data = await res.json();
        if (data.success) {
          Swal.fire({
            icon: 'success',
            title: `Product ${action}ed`,
            text: `Product ${action}ed successfully.`,
            timer: 2000,
            showConfirmButton: false
          }).then(() => {
            location.reload();
          });
        } else {
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: data.message || `Failed to ${action} product.`
          });
        }
      } catch (err) {
        console.error("Error toggling product status:", err);
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: 'Something went wrong while toggling product status.'
        });
      }
    };

    window.toggleVariantStatus = async function (productId, variantId, isBlocked) {
      const action = isBlocked === 'true' ? 'unblock' : 'block';
      try {
        const endpoint = `/admin/products/${productId}/variants/${variantId}/status`;
        const response = await fetch(endpoint, {
          method: "PATCH",
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ isBlocked: action === 'block' })
        });
        const data = await response.json();
        if (data.success) {
          Swal.fire({
            icon: 'success',
            title: `Variant ${action}ed`,
            text: `Variant ${action}ed successfully.`,
            timer: 2000,
            showConfirmButton: false
          }).then(() => {
            location.reload();
          });
        } else {
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: data.message || `Failed to ${action} variant.`
          });
        }
      } catch (err) {
        console.error("Error toggling variant status:", err);
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: 'Something went wrong while toggling variant status.'
        });
      }
    };

    document.addEventListener("DOMContentLoaded", function () {
      const addProductBtn = document.getElementById("add-product-btn");
      const productModal = document.getElementById("product-modal");
      const closeModalBtn = document.getElementById("close-modal");
      const cancelBtn = document.getElementById("cancel-btn");
      const productForm = document.getElementById("product-form");
      const modalTitle = document.getElementById("modal-title");
      const productIdInput = document.getElementById("product-id");
      const variantIdInput = document.getElementById("variant-id");
      const submitBtnText = document.getElementById("submit-btn-text");
      const colorVariantsContainer = document.getElementById("color-variants-container");
      const addColorVariantBtn = document.getElementById("add-color-variant");

      function addColorVariant(variant = { _id: "", colorName: "", colorValue: "#000000", regularPrice: "", discountPercentage: "", stock: "", productImage: [], hasOffer: false }) {
        const index = colorVariantsContainer.children.length;
        const variantEntry = document.createElement("div");
        variantEntry.className = "variant-entry relative border p-4 rounded-md mb-4";
        
        const images = Array.isArray(variant.productImage) ? variant.productImage : variant.productImage ? [variant.productImage] : [];
        const imageCount = images.length;
        
        variantEntry.uploadedFiles = [];
        
        variantEntry.innerHTML = `
          <div class="flex items-center justify-between mb-3">
            <h4 class="text-sm font-semibold text-gray-800 flex items-center">
              <span class="w-5 h-5 bg-blue-500 text-white rounded-full flex items-center justify-center text-xs mr-2">${index + 1}</span>
              Color Variant ${index + 1}
            </h4>
            <div class="image-counter ${imageCount >= 3 && imageCount <= 4 ? 'valid' : 'invalid'}">
              ${imageCount}/4 Images
            </div>
          </div>
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-3 mb-4">
            <div class="group">
              <label for="color-name-${index}" class="block text-xs font-medium text-gray-700 mb-1">Color Name <span class="text-red-500">*</span></label>
              <input type="text" id="color-name-${index}" name="colorVariants[${index}].colorName" 
                     value="${variant.colorName || ""}" 
                     class="w-full px-2 py-2 border border-gray-300 rounded-lg text-sm" 
                     placeholder="e.g., Ocean Blue">
              <span id="error5-${index}" class="error-message text-red-500"></span>
            </div>
            <div class="group">
              <label for="color-value-${index}" class="block text-xs font-medium text-gray-700 mb-1">Color</label>
              <div class="flex items-center space-x-2">
                <input type="color" id="color-value-${index}" name="colorVariants[${index}].colorValue" 
                       value="${variant.colorValue || "#000000"}" 
                       class="w-10 h-8 border border-gray-300 rounded cursor-pointer">
                <input type="text" value="${variant.colorValue || "#000000"}" 
                       class="flex-1 px-2 py-2 border border-gray-300 rounded-lg text-xs"
                       onchange="document.getElementById('color-value-${index}').value = this.value">
              </div>
            </div>
            <div class="group">
              <label for="regular-price-${index}" class="block text-xs font-medium text-gray-700 mb-1">Regular Price <span class="text-red-500">*</span></label>
              <div class="relative">
                <span class="absolute left-2 top-1/2 transform -translate-y-1/2 text-gray-500 text-xs">$</span>
                <input type="number" id="regular-price-${index}" name="colorVariants[${index}].regularPrice" 
                       value="${variant.regularPrice || ""}" step="0.01" min="0" 
                       class="w-full pl-6 pr-2 py-2 border border-gray-300 rounded-lg text-sm" 
                       placeholder="0.00">
              </div>
              <span id="error6-${index}" class="error-message text-red-500"></span>
            </div>
            <div class="group">
              <label for="discount-percentage-${index}" class="block text-xs font-medium text-gray-700 mb-1">Discount % <span class="text-red-500">*</span></label>
              <div class="relative">
                <span class="absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-500 text-xs">%</span>
                <input type="number" id="discount-percentage-${index}" name="colorVariants[${index}].discountPercentage" 
                       value="${variant.discountPercentage || ""}" step="1" min="0" max="100" 
                       class="w-full pr-6 pl-2 py-2 border border-gray-300 rounded-lg text-sm" 
                       placeholder="0">
              </div>
              <span id="error7-${index}" class="error-message text-red-500"></span>
              <div class="text-xs text-gray-500 mt-1">
                Offer Price: <span id="calculated-offer-price-${index}">—</span>
              </div>
            </div>
          </div>
          <div class="grid grid-cols-1 md:grid-cols-2 gap-3 mb-4">
            <div class="group">
              <label for="stock-${index}" class="block text-xs font-medium text-gray-700 mb-1">Stock Quantity <span class="text-red-500">*</span></label>
              <input type="number" id="stock-${index}" name="colorVariants[${index}].stock" 
                     value="${variant.stock || ""}" min="0" 
                     class="w-full px-2 py-2 border border-gray-300 rounded-lg text-sm" 
                     placeholder="0">
              <span id="error8-${index}" class="error-message text-red-500"></span>
            </div>
            <div class="flex items-end">
              <label class="flex items-center space-x-2 cursor-pointer bg-gray-50 px-3 py-2 rounded-lg hover:bg-gray-100">
                <input type="checkbox" id="has-offer-${index}" name="colorVariants[${index}].hasOffer" 
                       class="w-4 h-4 text-blue-500 border-gray-300 rounded" 
                       ${variant.hasOffer ? "checked" : ""}>
                <span class="text-xs font-medium text-gray-700">Enable Variant Offer</span>
              </label>
            </div>
          </div>
          <div class="mb-3">
            <label class="block text-xs font-medium text-gray-700 mb-2">
              Product Images <span class="text-red-500">*</span>
              <span class="text-xs text-gray-500 ml-1">(Add 3-4 images one by one)</span>
            </label>
            <div class="image-upload-area mb-3" onclick="document.getElementById('product-image-${index}').click()">
              <div class="flex flex-col items-center">
                <div class="w-8 h-8 bg-blue-500 bg-opacity-10 rounded-full flex items-center justify-center mb-2">
                  <i class="fas fa-plus text-blue-500 text-sm"></i>
                </div>
                <p class="text-xs font-medium text-gray-700 mb-1">Add Image</p>
                <p class="text-xs text-gray-500">PNG, JPG up to 5MB</p>
              </div>
              <input type="file" id="product-image-${index}" name="colorVariants[${index}].productImage[]" 
                     accept="image/*" class="hidden">
            </div>
            <span id="error9-${index}" class="error-message text-red-500"></span>
            <div class="variant-image-preview-container grid grid-cols-4 gap-2 mb-2">
              ${images.map((img, imgIdx) => `
                <div class="relative group">
                  <img src="${img}" class="variant-image-preview w-full h-16 object-cover rounded-lg" />
                  <button type="button" class="absolute -top-1 -right-1 w-5 h-5 bg-red-500 text-white rounded-full text-xs opacity-0 group-hover:opacity-100"
                          onclick="removeImage(this, ${index})">
                    <i class="fas fa-times"></i>
                  </button>
                </div>
              `).join("")}
            </div>
            <div class="image-error text-red-600 text-xs mt-1 hidden flex items-center">
              <i class="fas fa-exclamation-triangle mr-1"></i>
              <span></span>
            </div>
            ${images.length > 0 ? `
              <div class="mt-2 bg-yellow-50 border border-yellow-200 rounded-lg p-2">
                <label class="flex items-center space-x-2 cursor-pointer">
                  <input type="checkbox" id="remove-image-${index}" name="colorVariants[${index}].removeImage[]" 
                         class="w-3 h-3 text-yellow-600 border-yellow-300 rounded">
                  <span class="text-xs text-yellow-800">Replace all existing images</span>
                </label>
              </div>
              ${images.map((img, imgIdx) => `<input type="hidden" name="colorVariants[${index}].existingImage[${imgIdx}]" value="${img}">`).join("")}
            ` : ""}
            <input type="hidden" name="colorVariants[${index}]._id" value="${variant._id || ""}">
          </div>
          <button type="button" class="remove-variant-btn text-red-500 text-sm" title="Remove this variant">
            <i class="fas fa-trash"></i>
          </button>
        `;
        
        colorVariantsContainer.appendChild(variantEntry);

        const imageInput = variantEntry.querySelector(`input[name="colorVariants[${index}].productImage[]"]`);
        if (imageInput) {
          hookCropperOn(imageInput, variantEntry);
        }

        const uploadArea = variantEntry.querySelector(".image-upload-area");
        uploadArea.addEventListener('dragover', (e) => {
          e.preventDefault();
          uploadArea.classList.add('dragover');
        });

        uploadArea.addEventListener('dragleave', () => {
          uploadArea.classList.remove('dragover');
        });

        uploadArea.addEventListener('drop', (e) => {
          e.preventDefault();
          uploadArea.classList.remove('dragover');
          
          const files = Array.from(e.dataTransfer.files).filter(file => file.type.startsWith('image/'));
          if (files.length > 0) {
            const file = files[0];
            const dt = new DataTransfer();
            dt.items.add(file);
            imageInput.files = dt.files;
            imageInput.dispatchEvent(new Event('change'));
          }
        });

        const removeBtn = variantEntry.querySelector(".remove-variant-btn");
        if (removeBtn) {
          removeBtn.addEventListener("click", () => {
            if (colorVariantsContainer.children.length <= 1) {
              const errorDiv = variantEntry.querySelector(`#error5-${index}`);
              errorDiv.textContent = "At least one color variant is required.";
              errorDiv.style.display = 'block';
              return;
            }
            
            variantEntry.remove();
            Array.from(colorVariantsContainer.children).forEach((entry, idx) => {
              const title = entry.querySelector('h4');
              if (title) {
                title.innerHTML = `
                  <span class="w-5 h-5 bg-blue-500 text-white rounded-full flex items-center justify-center text-xs mr-2">${idx + 1}</span>
                  Color Variant ${idx + 1}
                `;
                updateCalculatedOfferPrice(idx);
              }
            });
          });
        }

        const regularPriceInput = variantEntry.querySelector(`#regular-price-${index}`);
        const discountInput = variantEntry.querySelector(`#discount-percentage-${index}`);
        const updateOfferPrice = () => updateCalculatedOfferPrice(index);
        regularPriceInput.addEventListener("input", updateOfferPrice);
        discountInput.addEventListener("input", updateOfferPrice);
        updateOfferPrice();

        return variantEntry;
      }

      function updateCalculatedOfferPrice(index) {
        const regularPriceInput = document.getElementById(`regular-price-${index}`);
        const discountInput = document.getElementById(`discount-percentage-${index}`);
        const offerPriceSpan = document.getElementById(`calculated-offer-price-${index}`);
        
        const regularPrice = parseFloat(regularPriceInput.value) || 0;
        const discountPercentage = parseFloat(discountInput.value) || 0;
        
        if (regularPrice > 0 && discountPercentage >= 0 && discountPercentage <= 100) {
          const offerPrice = regularPrice * (1 - discountPercentage / 100);
          offerPriceSpan.textContent = `$${offerPrice.toFixed(2)}`;
        } else {
          offerPriceSpan.textContent = "—";
        }
      }

      window.removeImage = function(button, variantIndex) {
        const imageDiv = button.parentElement;
        const variantEntry = imageDiv.closest('.variant-entry');
        
        if (variantEntry.uploadedFiles) {
          const imgIndex = Array.from(imageDiv.parentElement.children).indexOf(imageDiv);
          const existingImagesCount = variantEntry.querySelectorAll('input[name*="existingImage"]').length;
          
          if (imgIndex >= existingImagesCount) {
            const newImageIndex = imgIndex - existingImagesCount;
            if (newImageIndex >= 0 && newImageIndex < variantEntry.uploadedFiles.length) {
              variantEntry.uploadedFiles.splice(newImageIndex, 1);
            }
          }
        }
        
        imageDiv.remove();
        updateImageCounter(variantEntry);
      };

      function validateForm() {
        let isValid = true;

        document.querySelectorAll('.error-message').forEach(span => {
          span.style.display = 'none';
          span.textContent = '';
        });

        const productName = document.getElementById("product-name").value.trim();
        const brand = document.getElementById("product-brand").value;
        const category = document.getElementById("product-category").value;
        const description = document.getElementById("product-description").value.trim();

        if (!productName) {
          document.getElementById("error1").textContent = "Product name is required.";
          document.getElementById("error1").style.display = 'block';
          isValid = false;
        }

        if (!brand) {
          document.getElementById("error2").textContent = "Please select a brand.";
          document.getElementById("error2").style.display = 'block';
          isValid = false;
        }

        if (!category) {
          document.getElementById("error3").textContent = "Please select a category.";
          document.getElementById("error3").style.display = 'block';
          isValid = false;
        }

        if (!description) {
          document.getElementById("error4").textContent = "Product description is required.";
          document.getElementById("error4").style.display = 'block';
          isValid = false;
        }

        const variants = document.querySelectorAll("#color-variants-container .variant-entry");
        if (variants.length === 0) {
          const errorDiv = document.getElementById("error5-0") || document.createElement('div');
          errorDiv.id = "error5-0";
          errorDiv.className = "error-message text-red-500";
          colorVariantsContainer.appendChild(errorDiv);
          errorDiv.textContent = "At least one color variant is required.";
          errorDiv.style.display = 'block';
          isValid = false;
        }

        variants.forEach((entry, idx) => {
          const colorName = entry.querySelector(`input[name="colorVariants[${idx}].colorName"]`).value.trim();
          const regularPrice = entry.querySelector(`input[name="colorVariants[${idx}].regularPrice"]`).value;
          const discountPercentage = entry.querySelector(`input[name="colorVariants[${idx}].discountPercentage"]`).value;
          const stock = entry.querySelector(`input[name="colorVariants[${idx}].stock"]`).value;
          const existingImages = entry.querySelectorAll(`input[name="colorVariants[${idx}].existingImage"]`).length;
          const newImages = entry.uploadedFiles ? entry.uploadedFiles.length : 0;
          const removeImage = entry.querySelector(`input[name="colorVariants[${idx}].removeImage"]`)?.checked || false;
          const variantId = entry.querySelector(`input[name="colorVariants[${idx}]._id"]`).value;

          const totalImages = removeImage ? newImages : newImages + existingImages;

          if (!colorName) {
            entry.querySelector(`#error5-${idx}`).textContent = `Color name is required for variant ${idx + 1}.`;
            entry.querySelector(`#error5-${idx}`).style.display = 'block';
            isValid = false;
          }

          if (!regularPrice || parseFloat(regularPrice) <= 0) {
            entry.querySelector(`#error6-${idx}`).textContent = `Valid regular price is required for variant ${idx + 1}.`;
            entry.querySelector(`#error6-${idx}`).style.display = 'block';
            isValid = false;
          }

          if (discountPercentage === "" || parseFloat(discountPercentage) < 0 || parseFloat(discountPercentage) > 100) {
            entry.querySelector(`#error7-${idx}`).textContent = `Discount percentage must be between 0 and 100 for variant ${idx + 1}.`;
            entry.querySelector(`#error7-${idx}`).style.display = 'block';
            isValid = false;
          }

          if (!stock || parseInt(stock) < 0) {
            entry.querySelector(`#error8-${idx}`).textContent = `Valid stock quantity is required for variant ${idx + 1}.`;
            entry.querySelector(`#error8-${idx}`).style.display = 'block';
            isValid = false;
          }

          if (!variantId && totalImages < 3) {
            entry.querySelector(`#error9-${idx}`).textContent = `Minimum 3 images required for variant ${idx + 1}.`;
            entry.querySelector(`#error9-${idx}`).style.display = 'block';
            isValid = false;
          }

          if (totalImages > 4) {
            entry.querySelector(`#error9-${idx}`).textContent = `Maximum 4 images allowed for variant ${idx + 1}.`;
            entry.querySelector(`#error9-${idx}`).style.display = 'block';
            isValid = false;
          }
        });

        return isValid;
      }

      productForm.addEventListener("submit", async function (e) {
        e.preventDefault();

        if (!validateForm()) {
          return;
        }

        const formData = new FormData();
        const variants = buildVariantsJson();

        formData.append("productName", document.getElementById("product-name").value);
        formData.append("brand", document.getElementById("product-brand").value);
        formData.append("category", document.getElementById("product-category").value);
        formData.append("description", document.getElementById("product-description").value);
        formData.append("hasOffer", document.getElementById("product-offer").checked);

        variants.forEach((variant, idx) => {
          formData.append(`colorVariants[${idx}][colorName]`, variant.colorName);
          formData.append(`colorVariants[${idx}][colorValue]`, variant.colorValue);
          formData.append(`colorVariants[${idx}][regularPrice]`, variant.regularPrice);
          formData.append(`colorVariants[${idx}][discountPercentage]`, variant.discountPercentage);
          formData.append(`colorVariants[${idx}][stock]`, variant.stock);
          formData.append(`colorVariants[${idx}][hasOffer]`, variant.hasOffer);
          formData.append(`colorVariants[${idx}][removeImage]`, variant.removeImage);
          if (variant._id) {
            formData.append(`colorVariants[${idx}][_id]`, variant._id);
          }
          variant.existingImage.forEach((img, imgIdx) => {
            formData.append(`colorVariants[${idx}][existingImage][${imgIdx}]`, img);
          });
        });

        document.querySelectorAll("#color-variants-container .variant-entry").forEach((entry, idx) => {
          if (entry.uploadedFiles && entry.uploadedFiles.length >= 3) {
            entry.uploadedFiles.forEach((file, fileIdx) => {
              formData.append(`colorVariants[${idx}][productImage][]`, file);
            });
          } else if (!entry.querySelector(`input[name="colorVariants[${idx}]._id"]`).value) {
            entry.querySelector(`#error9-${idx}`).textContent = `Variant ${idx + 1} must have at least 3 images.`;
            entry.querySelector(`#error9-${idx}`).style.display = 'block';
            return;
          }
        });

        const productId = productIdInput.value;
        const variantId = variantIdInput.value;
        const url = variantId 
          ? `/admin/products/${productId}/variants/${variantId}` 
          : productId 
            ? `/admin/product/${productId}` 
            : "/admin/addProducts";
        const method = productId ? "PUT" : "POST";

        try {
          const response = await fetch(url, {
            method,
            body: formData,
          });

          const result = await response.json();
          if (response.ok && result.success) {
            Swal.fire({
              icon: 'success',
              title: 'Success',
              text: result.message || "Product saved successfully.",
              timer: 2000,
              showConfirmButton: false
            }).then(() => {
              productModal.classList.add("hidden");
              location.reload();
            });
          } else {
            Swal.fire({
              icon: 'error',
              title: 'Error',
              text: result.message || `Server error (Status: ${response.status}).`
            });
          }
        } catch (err) {
          console.error("Error submitting form:", err);
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Failed to connect to the server. Please try again.'
          });
        }
      });

      document.getElementById("cropper-cancel").onclick = () => {
        wrap.classList.add("hidden");
        if (cropper) {
          cropper.destroy();
          cropper = null;
        }
        if (currentInput) {
          currentInput.value = "";
        }
        currentInput = null;
        currentFile = null;
        currentVariantEntry = null;
      };

      document.getElementById("cropper-done").onclick = async () => {
        if (!cropper || !currentInput || !currentVariantEntry) return;
        
        cropper.getCroppedCanvas({ 
          width: 800, 
          height: 800
        }).toBlob((blob) => {
          const fileName = `crop_${Date.now()}.png`;
          const file = new File([blob], fileName, { type: "image/png" });
          
          if (!currentVariantEntry.uploadedFiles) {
            currentVariantEntry.uploadedFiles = [];
          }
          currentVariantEntry.uploadedFiles.push(file);
          
          const previewContainer = currentVariantEntry.querySelector('.variant-image-preview-container');
          const div = document.createElement("div");
          div.className = "relative group";
          div.innerHTML = `
            <img src="${URL.createObjectURL(file)}" class="variant-image-preview w-full h-16 object-cover rounded-lg" />
            <button type="button" class="absolute -top-1 -right-1 w-5 h-5 bg-red-500 text-white rounded-full text-xs opacity-0 group-hover:opacity-100"
                    onclick="removeImage(this, ${Array.from(colorVariantsContainer.children).indexOf(currentVariantEntry)})">
              <i class="fas fa-times"></i>
            </button>
          `;
          previewContainer.appendChild(div);
          
          updateImageCounter(currentVariantEntry);
          
          currentInput.value = "";
          wrap.classList.add("hidden");
          cropper.destroy();
          cropper = null;
          currentInput = null;
          currentFile = null;
          currentVariantEntry = null;
        }, "image/png");
      };

      addColorVariantBtn.addEventListener("click", () => addColorVariant());

      addProductBtn.addEventListener("click", () => {
        productModal.classList.remove("hidden");
        modalTitle.textContent = "Add New Product";
        submitBtnText.textContent = "Add Product";
        productForm.reset();
        colorVariantsContainer.innerHTML = "";
        addColorVariant();
        productIdInput.value = "";
        variantIdInput.value = "";
      });

      closeModalBtn.addEventListener("click", () => {
        productModal.classList.add("hidden");
      });

      cancelBtn.addEventListener("click", () => {
        productModal.classList.add("hidden");
      });

      productModal.addEventListener("click", (e) => {
        if (e.target === productModal) {
          productModal.classList.add("hidden");
        }
      });

      function buildVariantsJson() {
        const variants = [];
        document.querySelectorAll("#color-variants-container .variant-entry").forEach((entry, idx) => {
          const variant = {
            colorName: entry.querySelector(`input[name="colorVariants[${idx}].colorName"]`).value,
            colorValue: entry.querySelector(`input[name="colorVariants[${idx}].colorValue"]`).value,
            regularPrice: parseFloat(entry.querySelector(`input[name="colorVariants[${idx}].regularPrice"]`).value) || 0,
            discountPercentage: parseFloat(entry.querySelector(`input[name="colorVariants[${idx}].discountPercentage"]`).value) || 0,
            stock: parseInt(entry.querySelector(`input[name="colorVariants[${idx}].stock"]`).value) || 0,
            hasOffer: entry.querySelector(`input[name="colorVariants[${idx}].hasOffer"]`).checked,
            _id: entry.querySelector(`input[name="colorVariants[${idx}]._id"]`).value || "",
            removeImage: entry.querySelector(`input[name="colorVariants[${idx}].removeImage"]`)?.checked || false,
            existingImage: Array.from(entry.querySelectorAll(`input[name="colorVariants[${idx}].existingImage"]`)).map(input => input.value)
          };
          variants.push(variant);
        });
        return variants;
      }

      window.openEditModal = async function(productId, variantId = null) {
        try {
          const response = await fetch(`/admin/products/${productId}`);
          if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
          }
          const data = await response.json();
          
          if (!data.success) {
            Swal.fire({
              icon: 'error',
              title: 'Error',
              text: data.message || "Failed to fetch product data."
            });
            return;
          }

          const product = data.product;
          productModal.classList.remove("hidden");
          modalTitle.textContent = variantId ? "Edit Variant" : "Edit Product";
          submitBtnText.textContent = "Update Product";
          productIdInput.value = productId;
          variantIdInput.value = variantId || "";

          document.getElementById("product-name").value = product.productName || "";
          document.getElementById("product-brand").value = product.brand?._id || "";
          document.getElementById("product-category").value = product.category?._id || "";
          document.getElementById("product-description").value = product.description || "";
          document.getElementById("product-offer").checked = product.hasOffer || false;

          colorVariantsContainer.innerHTML = "";
          if (variantId) {
            const variant = product.colorVariants.find(v => v._id === variantId);
            if (variant) {
              addColorVariant({
                _id: variant._id,
                colorName: variant.colorName,
                colorValue: variant.colorValue,
                regularPrice: variant.regularPrice,
                discountPercentage: variant.discountPercentage,
                stock: variant.stock,
                productImage: variant.productImage,
                hasOffer: variant.hasOffer
              });
            }
          } else {
            product.colorVariants.forEach(variant => {
              addColorVariant({
                _id: variant._id,
                colorName: variant.colorName,
                colorValue: variant.colorValue,
                regularPrice: variant.regularPrice,
                discountPercentage: variant.discountPercentage,
                stock: variant.stock,
                productImage: variant.productImage,
                hasOffer: variant.hasOffer
              });
            });
          }

          document.getElementById("product-name").removeAttribute("disabled");
          document.getElementById("product-brand").removeAttribute("disabled");
          document.getElementById("product-category").removeAttribute("disabled");
        } catch (err) {
          console.error("Error fetching product data:", err);
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Something went wrong while fetching product data.'
          });
        }
      };
    });
  </script>
</body>
</html>