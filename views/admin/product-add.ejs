<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Eon Forge - Product Management</title>
  <link href="https://cdn.jsdelivr.net/npm/cropperjs@1.5.13/dist/cropper.min.css" rel="stylesheet" />
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="https://cdn.tailwindcss.com"></script>
  <script>
    tailwind.config = {
      theme: {
        extend: {
          colors: {
            primary: '#4361ee',
            'primary-dark': '#3a56d4',
            secondary: '#3f37c9',
            success: '#4cc9f0',
            danger: '#f72585',
            warning: '#f8961e',
            info: '#4895ef',
          }
        }
      }
    }
  </script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <style>
    .account-dropdown { display: none; }
    .account-wrapper:hover .account-dropdown { display: block; }
    .sidebar-menu a.active { background-color: rgba(255, 255, 255, 0.1); }
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(-10px); }
      to { opacity: 1; transform: translateY(0); }
    }
    .animate-fadeIn { animation: fadeIn 0.3s ease-out; }
    .variant-image-preview {
      max-width: 100px;
      max-height: 100px;
      object-fit: contain;
      margin-right: 10px;
      margin-bottom: 10px;
      border: 1px solid #e5e7eb;
      border-radius: 0.375rem;
    }
    .variant-image-preview-container {
      display: flex;
      flex-wrap: wrap;
      margin-top: 10px;
    }
    .variant-entry {
      border: 1px solid #e5e7eb;
      padding: 10px;
      border-radius: 0.375rem;
      margin-bottom: 10px;
    }
    .action-btn {
      padding: 8px 12px;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      background: none;
    }
    .action-btn:hover {
      opacity: 0.9;
    }
  </style>
</head>
<body class="font-sans bg-gray-50 text-gray-900 overflow-x-hidden">
  <div class="flex min-h-screen">
    <%- include("../../views/partials/admin/sidebar") %>
    <div class="flex-1 ml-64 min-h-screen">
      <header class="bg-white py-4 px-6 flex items-center shadow sticky top-0 z-40">
        <button class="menu-toggle mr-4 text-xl md:hidden">
          <i class="fas fa-bars"></i>
        </button>
        <form action="/admin/addProducts" method="get" class="search-container flex items-center bg-gray-50 rounded-full px-4 py-2 w-full max-w-md ml-4">
          <input type="text" name="search" placeholder="Search products..." class="search-input bg-transparent border-none w-full focus:outline-none" value="<%= typeof search !== 'undefined' ? search : '' %>">
          <button type="submit" class="search-btn text-gray-500 hover:text-primary">
            <i class="fas fa-search"></i>
          </button>
          <% if(search){ %>
            <a href="/admin/addProducts" class="search-clear-btn text-gray-500 hover:text-primary ml-2">
              <i class="fas fa-times"></i>
            </a>
          <% } %>
        </form>
        <div class="account-wrapper relative ml-auto">
          <button class="icon-btn text-xl text-gray-700" title="Account">
            <i class="fas fa-user"></i>
          </button>
          <div class="account-dropdown absolute right-0 top-full bg-white min-w-40 shadow-lg rounded-md overflow-hidden">
            <a href="/profile" class="block px-4 py-2 text-gray-700 no-underline hover:bg-gray-100">
              <i class="fas fa-user mr-2"></i> Profile
            </a>
            <a href="/admin/logout" class="block px-4 py-2 text-gray-700 no-underline hover:bg-gray-100">
              <i class="fas fa-sign-out-alt mr-2"></i> Logout
            </a>
          </div>
        </div>
      </header>
      <main class="p-6">
        <div class="flex justify-between items-center mb-6">
          <h1 class="text-2xl font-semibold text-gray-800">Product Management</h1>
          <button id="add-product-btn" class="bg-primary hover:bg-primary-dark text-white px-4 py-2 rounded flex items-center">
            <i class="fas fa-plus mr-2"></i> Add Product
          </button>
        </div>
        <div class="bg-white rounded-xl shadow-sm overflow-hidden mb-6">
          <div class="overflow-x-auto">
            <table class="w-full border-collapse">
              <thead>
                <tr class="sticky top-0 bg-white shadow-sm">
                  <th class="px-4 py-3 text-left font-semibold text-gray-500">No.</th>
                  <th class="px-4 py-3 text-left font-semibold text-gray-500">Product Name</th>
                  <th class="px-4 py-3 text-left font-semibold text-gray-500">Brand</th>
                  <th class="px-4 py-3 text-left font-semibold text-gray-500">Category</th>
                  <th class="px-4 py-3 text-left font-semibold text-gray-500">Regular Price</th>
                  <th class="px-4 py-3 text-left font-semibold text-gray-500">Offer Price</th>
                  <th class="px-4 py-3 text-left font-semibold text-gray-500">Offer</th>
                  <th class="px-4 py-3 text-left font-semibold text-gray-500">Stock</th>
                  <th class="px-4 py-3 text-left font-semibold text-gray-500">Status</th>
                  <th class="px-4 py-3 text-left font-semibold text-gray-500">Actions</th>
                </tr>
              </thead>
              <tbody>
                <% products.forEach((product, index) => { %>
                  <% const firstVariant = (product.variants && product.variants.length) ? product.variants[0] : null; %>
                  <tr class="hover:bg-gray-50 group">
                    <td class="px-4 py-3">
                      <div class="flex items-center gap-2">
                        <span><%= (currentPage - 1) * limit + index + 1 %></span>
                        <% if (product.variants && product.variants.length > 1) { %>
                          <button onclick="window.toggleVariants('<%= product._id %>')" id="toggle-btn-<%= product._id %>" class="text-gray-500 hover:text-black transition duration-200">
                            ➤
                          </button>
                        <% } %>
                      </div>
                    </td>
                    <td class="px-4 py-3 font-medium"><%= product.productName %></td>
                    <td class="px-4 py-3"><%= product.brand?.brandName || 'N/A' %></td>
                    <td class="px-4 py-3"><%= product.category?.name || 'N/A' %></td>
                    <td class="px-4 py-3">
                      <%= firstVariant && firstVariant.regularPrice != null ? '$' + firstVariant.regularPrice.toFixed(2) : '—' %>
                    </td>
                    <td class="px-4 py-3">
                      <%= firstVariant && firstVariant.offerPrice != null ? '$' + firstVariant.offerPrice.toFixed(2) : '—' %>
                    </td>
                    <td class="px-4 py-3">
                      <% if (product.hasOffer || (firstVariant && firstVariant.hasOffer)) { %>
                        <span class="text-green-600 font-semibold">Active</span>
                      <% } else { %>
                        <span class="text-red-600 font-semibold">Inactive</span>
                      <% } %>
                    </td>
                    <td class="px-4 py-3">
                      <%= product.stockTotal != null ? product.stockTotal : '—' %>
                    </td>
                    <td class="px-4 py-3">
                      <% if (product.status === 'Available') { %>
                        <span class="text-green-600 font-semibold">Available</span>
                      <% } else { %>
                        <span class="text-red-600 font-semibold">Out of Stock</span>
                      <% } %>
                    </td>
                    <td class="px-4 py-3">
                      <button onclick="window.openEditModal('<%= product._id %>')" class="text-blue-600 hover:underline mr-2">Edit</button>
                      <button class="action-btn px-2 py-1 rounded hover:opacity-90 <%= product.isBlocked ? 'text-green-600' : 'text-red-600' %>" 
                              onclick="toggleProductStatus('<%= product._id %>', '<%= product.isBlocked %>')">
                        <%= product.isBlocked ? 'Unblock' : 'Block' %>
                        <i class="fas <%= product.isBlocked ? 'fa-eye' : 'fa-eye-slash' %> ml-1"></i>
                      </button>
                    </td>
                  </tr>
                  <% if (product.variants && product.variants.length > 1) { %>
                    <% product.variants.slice(1).forEach((variant, idx) => { %>
                      <tr id="variant-row-<%= product._id %>-<%= idx %>" class="hidden bg-gray-50">
                        <td class="px-4 py-3"></td>
                        <td class="px-4 py-3 font-medium"><%= product.productName %> (Variant)</td>
                        <td class="px-4 py-3"><%= product.brand?.brandName || 'N/A' %></td>
                        <td class="px-4 py-3"><%= product.category?.name || 'N/A' %></td>
                        <td class="px-4 py-3">
                          <%= variant.regularPrice != null ? '$' + variant.regularPrice.toFixed(2) : '—' %>
                        </td>
                        <td class="px-4 py-3">
                          <%= variant.offerPrice != null ? '$' + variant.offerPrice.toFixed(2) : '—' %>
                        </td>
                        <td class="px-4 py-3">
                          <% if (variant.hasOffer) { %>
                            <span class="text-green-600 font-semibold">Active</span>
                          <% } else { %>
                            <span class="text-red-600 font-semibold">Inactive</span>
                          <% } %>
                        </td>
                        <td class="px-4 py-3">
                          <%= variant.stock != null ? variant.stock : '—' %>
                        </td>
                        <td class="px-4 py-3">
                          <% if (variant.isActive === 'Available') { %>
                            <span class="text-green-600 font-semibold">Available</span>
                          <% } else { %>
                            <span class="text-red-600 font-semibold">Out of Stock</span>
                          <% } %>
                        </td>
                        <td class="px-4 py-3">
                          <button class="action-btn px-2 py-1 rounded hover:opacity-90 <%= variant.deletedAt ? 'text-green-600' : 'text-red-600' %>"
                                  onclick="toggleVariantStatus('<%= product._id %>', '<%= variant._id %>', '<%= !!variant.deletedAt %>')">
                            <%= variant.deletedAt ? 'Unblock' : 'Block' %>
                            <i class="fas <%= variant.deletedAt ? 'fa-eye' : 'fa-eye-slash' %> ml-1"></i>
                          </button>
                        </td>
                      </tr>
                    <% }); %>
                  <% } %>
                <% }); %>
              </tbody>
            </table>
          </div>
          <div class="pagination flex justify-center items-center p-4 gap-2">
            <a href="?page=<%= currentPage - 1 %>" class="pagination-btn p-2 rounded" <% if (currentPage === 1) { %> style="pointer-events:none;opacity:0.5" <% } %>>
              <i class="fas fa-chevron-left"></i>
            </a>
            <div id="page-numbers" class="flex gap-1">
              <% for(let i = 1; i <= totalPages; i++) { %>
                <a href="?page=<%= i %>" class="page-link px-3 py-1 rounded <%= i === currentPage ? 'bg-primary text-white' : 'hover:bg-gray-100' %>">
                  <%= i %>
                </a>
              <% } %>
            </div>
            <a href="?page=<%= currentPage + 1 %>" class="pagination-btn p-2 rounded" <% if (currentPage >= totalPages) { %> style="pointer-events:none;opacity:0.5" <% } %>>
              <i class="fas fa-chevron-right"></i>
            </a>
          </div>
        </div>
        <div id="product-modal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden flex items-center justify-center p-4 overflow-y-auto">
          <div class="bg-white rounded-xl shadow-lg w-full max-w-4xl animate-fadeIn">
            <div class="flex justify-between items-center p-4 border-b">
              <h2 id="modal-title" class="text-xl font-semibold">Add New Product</h2>
              <button id="close-modal" class="text-gray-500 hover:text-gray-700 text-2xl">×</button>
            </div>
            <form id="product-form" class="p-4" enctype="multipart/form-data">
              <input type="hidden" id="product-id" name="productId">
              <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <div class="mb-4">
                    <label for="product-name" class="block text-gray-700 mb-2">Product Name *</label>
                    <input type="text" id="product-name" name="productName" required class="w-full px-3 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-primary">
                  </div>
                  <div class="mb-4">
                    <label for="product-brand" class="block text-gray-700 mb-2">Brand *</label>
                    <select id="product-brand" name="brand" required class="w-full px-3 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-primary">
                      <option value="">Select Brand</option>
                      <% brand.forEach(brand => { %>
                        <option value="<%= brand._id %>"><%= brand.brandName %></option>
                      <% }); %>
                    </select>
                  </div>
                  <div class="mb-4">
                    <label for="product-category" class="block text-gray-700 mb-2">Category *</label>
                    <select id="product-category" name="category" required class="w-full px-3 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-primary">
                      <option value="">Select Category</option>
                      <% cat.forEach(category => { %>
                        <option value="<%= category._id %>"><%= category.name %></option>
                      <% }); %>
                    </select>
                  </div>
                  <div class="mb-4">
                    <label for="product-description" class="block text-gray-700 mb-2">Description *</label>
                    <textarea id="product-description" name="description" rows="4" required class="w-full px-3 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-primary"></textarea>
                  </div>
                </div>
                <div>
                  <div class="mb-4">
                    <label class="block text-gray-700 mb-2">Color Variants *</label>
                    <div id="color-variants-container"></div>
                    <button type="button" id="add-color-variant" class="mt-2 bg-primary hover:bg-primary-dark text-white px-3 py-1 rounded">
                      Add Color Variant
                    </button>
                  </div>
                  <div class="mb-4 flex items-center">
                    <input type="checkbox" id="product-offer" name="hasOffer" class="mr-2">
                    <label for="product-offer" class="text-gray-700">Enable Offer for Product</label>
                  </div>
                </div>
              </div>
              <div class="flex justify-end space-x-3">
                <button type="button" id="cancel-btn" class="px-4 py-2 border rounded text-gray-700 hover:bg-gray-100">
                  Cancel
                </button>
                <button type="submit" class="px-4 py-2 bg-primary hover:bg-primary-dark text-white rounded">
                  <span id="submit-btn-text">Add Product</span>
                </button>
              </div>
            </form>
          </div>
        </div>
      </main>
    </div>
  </div>
  <div id="cropper-wrapper" class="fixed inset-0 bg-black/60 hidden items-center justify-center z-[999]">
    <div class="bg-white rounded-md shadow-xl p-4 max-w-xl w-full">
      <img id="cropper-image" class="max-h-[70vh] w-full object-contain" />
      <div class="mt-4 flex justify-end gap-2">
        <button id="cropper-cancel" class="px-4 py-2 border rounded">Cancel</button>
        <button id="cropper-done" class="px-4 py-2 bg-primary text-white rounded">Crop & keep</button>
      </div>
    </div>
  </div>
  <script src="https://cdn.jsdelivr.net/npm/cropperjs@1.5.13/dist/cropper.min.js"></script>
  <script>
    let currentInput = null;
    let cropper = null;
    const wrap = document.getElementById("cropper-wrapper");
    const imgTag = document.getElementById("cropper-image");

    function hookCropperOn(input) {
      input.addEventListener("change", (e) => {
        if (!e.target.files || !e.target.files[0]) return;
        currentInput = e.target;
        imgTag.src = URL.createObjectURL(e.target.files[0]);
        wrap.classList.remove("hidden");
        if (cropper) cropper.destroy();
        cropper = new Cropper(imgTag, {
          viewMode: 1,
          aspectRatio: 1,
        });
      });
    }

    window.toggleVariants = function (productId) {
      const variantRows = document.querySelectorAll(`[id^="variant-row-${productId}"]`);
      const toggleBtn = document.getElementById(`toggle-btn-${productId}`);
      variantRows.forEach((row) => row.classList.toggle("hidden"));
      toggleBtn.textContent = variantRows[0].classList.contains("hidden") ? "➤" : "⮟";
    };

    window.toggleProductStatus = async function (productId, isBlocked) {
      const action = isBlocked ? 'unblock' : 'block';
      const result = await Swal.fire({
        title: `Are you sure?`,
        text: `This product will be ${action}ed.`,
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#3085d6",
        cancelButtonColor: "#d33",
        confirmButtonText: `Yes, ${action} it!`,
      });

      if (!result.isConfirmed) return;

      try {
        const res = await fetch(`/admin/products/${productId}/status`, {
          method: "PATCH",
          headers: { "Content-Type": "application/json" },
        });
        const data = await res.json();
        if (data.success) {
          await Swal.fire(`${action.charAt(0).toUpperCase() + action.slice(1)}ed!`, data.message || `Product ${action}ed.`, "success");
          location.reload();
        } else {
          Swal.fire("Error", data.message || `Failed to ${action} product`, "error");
        }
      } catch (err) {
        console.error("Fetch error:", err);
        Swal.fire("Error", `Something went wrong while ${action}ing.`, "error");
      }
    };

    window.toggleVariantStatus = async function (productId, variantId, isBlocked) {
      console.log('Toggling variant status:', { productId, variantId, isBlocked });
      const action = isBlocked ? 'unblock' : 'block';
      const result = await Swal.fire({
        title: `Are you sure?`,
        text: `This variant will be ${action}ed.`,
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#3085d6",
        cancelButtonColor: "#d33",
        confirmButtonText: `Yes, ${action} it!`,
      });

      if (!result.isConfirmed) return;

      try {
        const endpoint = isBlocked
          ? `/admin/products/${productId}/variants/unblock/${variantId}`
          : `/admin/products/${productId}/variants/block/${variantId}`;
        const res = await fetch(endpoint, {
          method: "PATCH",
          headers: { "Content-Type": "application/json" },
        });
        const data = await res.json();
        if (data.success) {
          await Swal.fire(`${action.charAt(0).toUpperCase() + action.slice(1)}ed!`, data.message || `Variant ${action}ed.`, "success");
          location.reload();
        } else {
          Swal.fire("Error", data.message || `Failed to ${action} variant`, "error");
        }
      } catch (err) {
        console.error("Error:", err);
        Swal.fire("Error", `Something went wrong while ${action}ing.`, "error");
      }
    };

    document.addEventListener("DOMContentLoaded", function () {
      const addProductBtn = document.getElementById("add-product-btn");
      const productModal = document.getElementById("product-modal");
      const closeModalBtn = document.getElementById("close-modal");
      const cancelBtn = document.getElementById("cancel-btn");
      const productForm = document.getElementById("product-form");
      const modalTitle = document.getElementById("modal-title");
      const productIdInput = document.getElementById("product-id");
      const submitBtnText = document.getElementById("submit-btn-text");
      const colorVariantsContainer = document.getElementById("color-variants-container");
      const addColorVariantBtn = document.getElementById("add-color-variant");

      function addColorVariant(variant = { _id: "", colorName: "", colorValue: "#000000", regularPrice: "", offerPrice: "", stock: "", productImage: [], hasOffer: false }) {
        const index = colorVariantsContainer.children.length;
        const variantEntry = document.createElement("div");
        variantEntry.className = "variant-entry grid grid-cols-1 md:grid-cols-5 gap-4 mb-2";
        const images = Array.isArray(variant.productImage) ? variant.productImage : variant.productImage ? [variant.productImage] : [];
        variantEntry.innerHTML = `
          <div>
            <label class="block text-gray-700 text-sm mb-1">Color Name</label>
            <input type="text" name="colorVariants[${index}].colorName" value="${variant.colorName || ""}" class="w-full px-3 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-primary" required>
          </div>
          <div>
            <label class="block text-gray-700 text-sm mb-1">Color Picker</label>
            <input type="color" name="colorVariants[${index}].colorValue" value="${variant.colorValue || "#000000"}" class="w-full h-10 border rounded focus:outline-none focus:ring-2 focus:ring-primary">
          </div>
          <div>
            <label class="block text-gray-700 text-sm mb-1">Regular Price</label>
            <input type="number" name="colorVariants[${index}].regularPrice" value="${variant.regularPrice || ""}" step="0.01" min="0" class="w-full px-3 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-primary" required>
          </div>
          <div>
            <label class="block text-gray-700 text-sm mb-1">Sale Price</label>
            <input type="number" name="colorVariants[${index}].offerPrice" value="${variant.offerPrice || ""}" step="0.01" min="0" class="w-full px-3 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-primary" required>
          </div>
          <div>
            <label class="block text-gray-700 text-sm mb-1">Stock</label>
            <input type="number" name="colorVariants[${index}].stock" value="${variant.stock || ""}" min="0" class="w-full px-3 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-primary" required>
          </div>
          <div class="md:col-span-5 flex items-center">
            <input type="checkbox" name="colorVariants[${index}].hasOffer" class="mr-2" ${variant.hasOffer ? "checked" : ""}>
            <label class="text-gray-700 text-sm">Enable Offer</label>
          </div>
          <div class="md:col-span-5">
            <label class="block text-gray-700 text-sm mb-1">Variant Image</label>
            <input type="file" name="colorVariants[${index}].productImage" accept="image/*" multiple class="w-full px-3 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-primary">
            <div class="variant-image-preview-container mt-2">
              ${images.map((img) => `<img src="${img}" class="variant-image-preview" />`).join("")}
            </div>
            ${images.length > 0 ? `
              <div class="mt-2">
                <label class="inline-flex items-center">
                  <input type="checkbox" name="colorVariants[${index}].removeImage" class="mr-2">
                  <span class="text-sm text-gray-600">Remove existing images</span>
                </label>
              </div>
              ${images.map((img, imgIdx) => `<input type="hidden" name="colorVariants[${index}].existingImage[${imgIdx}]" value="${img}">`).join("")}
            ` : ""}
            <input type="hidden" name="colorVariants[${index}]._id" value="${variant._id || ""}">
          </div>
          <div class="md:col-span-5 flex justify-end">
            <button type="button" class="remove-variant text-red-600 hover:text-red-800">
              <i class="fas fa-trash"></i>
            </button>
          </div>
        `;
        colorVariantsContainer.appendChild(variantEntry);

        const imageInput = variantEntry.querySelector('input[type="file"]');
        const previewContainer = variantEntry.querySelector(".variant-image-preview-container");
        if (imageInput) {
          imageInput.addEventListener("change", function () {
            previewContainer.innerHTML = "";
            if (this.files && this.files[0]) {
              const reader = new FileReader();
              reader.onload = function (e) {
                const img = document.createElement("img");
                img.src = e.target.result;
                img.className = "variant-image-preview";
                previewContainer.appendChild(img);
              };
              reader.readAsDataURL(this.files[0]);
            }
          });
          hookCropperOn(imageInput);
        }

        const removeBtn = variantEntry.querySelector(".remove-variant");
        if (removeBtn) {
          removeBtn.addEventListener("click", () => variantEntry.remove());
        }

        return variantEntry;
      }

      if (addColorVariantBtn) {
        addColorVariantBtn.addEventListener("click", () => addColorVariant());
      }

      addProductBtn.addEventListener("click", () => {
        modalTitle.textContent = "Add New Product";
        submitBtnText.textContent = "Add Product";
        productForm.reset();
        productIdInput.value = "";
        colorVariantsContainer.innerHTML = "";
        addColorVariant();
        document.getElementById("product-offer").checked = false;
        productModal.classList.remove("hidden");
      });

      function closeModal() {
        productModal.classList.add("hidden");
      }

      closeModalBtn.addEventListener("click", closeModal);
      cancelBtn.addEventListener("click", closeModal);

      window.openEditModal = async function (productId, variantId = null) {
        try {
          const url = variantId ? `/admin/products/${productId}/variants/${variantId}` : `/admin/products/${productId}`;
          const response = await fetch(url);
          if (!response.ok) throw new Error("Failed to fetch product");
          const data = await response.json();
          const product = variantId ? { 
            colorVariants: [data], 
            productName: data.productName, 
            brand: data.brand, 
            category: data.category, 
            description: data.description, 
            hasOffer: data.hasOffer
          } : data;

          modalTitle.textContent = variantId ? "Edit Variant" : "Edit Product";
          submitBtnText.textContent = "Update";
          productIdInput.value = productId;
          document.getElementById("product-name").value = product.productName || "";
          document.getElementById("product-brand").value = product.brand?._id || "";
          document.getElementById("product-category").value = product.category?._id || "";
          document.getElementById("product-description").value = product.description || "";
          document.getElementById("product-offer").checked = product.hasOffer || false;
          colorVariantsContainer.innerHTML = "";
          if (product.colorVariants && product.colorVariants.length > 0) {
            product.colorVariants.forEach((variant) => addColorVariant(variant));
          } else {
            addColorVariant();
          }
          productModal.classList.remove("hidden");
        } catch (error) {
          console.error("Error:", error);
          Swal.fire("Error", "Failed to load product data", "error");
        }
      };

      function buildVariantsJson() {
        const variants = [];
        document.querySelectorAll("#color-variants-container .variant-entry").forEach((entry) => {
          const index = entry.querySelector('input[name$="colorName"]').name.match(/\[(\d+)\]/)[1];
          variants.push({
            _id: entry.querySelector(`[name="colorVariants[${index}]._id"]`).value || undefined,
            colorName: entry.querySelector(`[name="colorVariants[${index}].colorName"]`).value,
            colorValue: entry.querySelector(`[name="colorVariants[${index}].colorValue"]`).value,
            regularPrice: parseFloat(entry.querySelector(`[name="colorVariants[${index}].regularPrice"]`).value) || 0,
            offerPrice: parseFloat(entry.querySelector(`[name="colorVariants[${index}].offerPrice"]`).value) || 0,
            stock: parseInt(entry.querySelector(`[name="colorVariants[${index}].stock"]`).value) || 0,
            hasOffer: entry.querySelector(`[name="colorVariants[${index}].hasOffer"]`).checked,
          });
        });
        return variants;
      }

      productForm.addEventListener("submit", async function (e) {
        e.preventDefault();
        const formData = new FormData(productForm);
        formData.set("colorVariants", JSON.stringify(buildVariantsJson()));
        const url = productIdInput.value ? `/admin/product/${productIdInput.value}` : "/admin/addProducts";
        const method = productIdInput.value ? "PUT" : "POST";
        try {
          const response = await fetch(url, {
            method,
            body: formData,
          });
          const result = await response.json();
          if (result.success) {
            Swal.fire("Success", result.message, "success").then(() => location.reload());
          } else {
            Swal.fire("Error", result.message, "error");
          }
        } catch (err) {
          console.error(err);
          Swal.fire("Error", "Something went wrong!", "error");
        }
      });

      document.getElementById("cropper-cancel").onclick = () => {
        wrap.classList.add("hidden");
        cropper?.destroy();
        cropper = null;
        currentInput = null;
      };

      document.getElementById("cropper-done").onclick = async () => {
        if (!cropper || !currentInput) return;
        cropper.getCroppedCanvas({ width: 800, height: 800 }).toBlob((blob) => {
          const fileName = `crop_${Date.now()}.png`;
          const file = new File([blob], fileName, { type: "image/png" });
          const dt = new DataTransfer();
          dt.items.add(file);
          currentInput.files = dt.files;
          const previewDiv = currentInput.closest(".variant-entry").querySelector(".variant-image-preview-container");
          previewDiv.innerHTML = "";
          const img = document.createElement("img");
          img.src = URL.createObjectURL(file);
          img.className = "variant-image-preview";
          previewDiv.appendChild(img);
          document.getElementById("cropper-cancel").click();
        }, "image/png");
      };

      document.querySelectorAll('input[name$="productImage"]').forEach(hookCropperOn);
    });
  </script>
</body>
</html>